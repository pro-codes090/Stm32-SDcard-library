
stm32f4_sdcard_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000038  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004c26  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c3e  00000000  00000000  00024cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  00025900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000260  00000000  00000000  00025bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000396a  00000000  00000000  00025e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003011  00000000  00000000  00029782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c553  00000000  00000000  0002c793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00038ce6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001254  00000000  00000000  00038d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080028a4 	.word	0x080028a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080028a4 	.word	0x080028a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInits>:
uint8_t res7 = 0 ;
uint8_t Data [] = {0xff ,0xff ,0xff ,0xff ,0xff ,0xff ,0xff ,0xff ,0xff ,0xff ,} ;
uint8_t dummyByte = 0xff ;
uint8_t dummyReadByte = 0xff ;
void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <SPI2_GPIOInits+0x70>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002aa:	2303      	movs	r3, #3
 80002ac:	72bb      	strb	r3, [r7, #10]

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ae:	230f      	movs	r3, #15
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f91f 	bl	80014f8 <GPIO_Init>

//	MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002ba:	230e      	movs	r3, #14
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 f919 	bl	80014f8 <GPIO_Init>


	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002c6:	230d      	movs	r3, #13
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 f913 	bl	80014f8 <GPIO_Init>


	// pin for NSS pin
	SPIPins.pGPIOx = GPIOB ;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <SPI2_GPIOInits+0x70>)
 80002d4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80002d6:	2301      	movs	r3, #1
 80002d8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0 ;
 80002da:	2300      	movs	r3, #0
 80002dc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_PP;
 80002de:	2300      	movs	r3, #0
 80002e0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH ;
 80002e6:	2303      	movs	r3, #3
 80002e8:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10 ;
 80002ea:	230a      	movs	r3, #10
 80002ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins) ;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 f901 	bl	80014f8 <GPIO_Init>

}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40020400 	.word	0x40020400

08000304 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <SPI2_Inits+0x38>)
 800030c:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800030e:	2301      	movs	r3, #1
 8000310:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000312:	2301      	movs	r3, #1
 8000314:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV64;//generates sclk of 8MHz
 8000316:	2305      	movs	r3, #5
 8000318:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800031e:	2300      	movs	r3, #0
 8000320:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000322:	2300      	movs	r3, #0
 8000324:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 8000326:	2301      	movs	r3, #1
 8000328:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800032a:	463b      	mov	r3, r7
 800032c:	4618      	mov	r0, r3
 800032e:	f000 feb9 	bl	80010a4 <SPI_Init>
}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40003800 	.word	0x40003800

08000340 <deselectSDcard>:

void deselectSDcard(){GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_10, SET);}
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
 8000344:	2201      	movs	r2, #1
 8000346:	210a      	movs	r1, #10
 8000348:	4802      	ldr	r0, [pc, #8]	; (8000354 <deselectSDcard+0x14>)
 800034a:	f001 fa8d 	bl	8001868 <GPIO_WriteToOutputPin>
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40020400 	.word	0x40020400

08000358 <selectSDcard>:
void selectSDcard(){GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_10, RESET);}
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
 800035c:	2200      	movs	r2, #0
 800035e:	210a      	movs	r1, #10
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <selectSDcard+0x14>)
 8000362:	f001 fa81 	bl	8001868 <GPIO_WriteToOutputPin>
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40020400 	.word	0x40020400

08000370 <sdPowerUp>:

void sdPowerUp(){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	deselectSDcard();
 8000376:	f7ff ffe3 	bl	8000340 <deselectSDcard>

	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 800037a:	2300      	movs	r3, #0
 800037c:	80fb      	strh	r3, [r7, #6]
 800037e:	e002      	b.n	8000386 <sdPowerUp+0x16>
 8000380:	88fb      	ldrh	r3, [r7, #6]
 8000382:	3301      	adds	r3, #1
 8000384:	80fb      	strh	r3, [r7, #6]
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800038c:	d3f8      	bcc.n	8000380 <sdPowerUp+0x10>
	// sending 80 clock cycles
	uint8_t R1_Response = 0x0f; // store the R1 response for CMD 0
 800038e:	230f      	movs	r3, #15
 8000390:	707b      	strb	r3, [r7, #1]
	SPI_Send(SPI2, Data, 10) ;
 8000392:	220a      	movs	r2, #10
 8000394:	4934      	ldr	r1, [pc, #208]	; (8000468 <sdPowerUp+0xf8>)
 8000396:	4835      	ldr	r0, [pc, #212]	; (800046c <sdPowerUp+0xfc>)
 8000398:	f000 fedf 	bl	800115a <SPI_Send>

	deselectSDcard();
 800039c:	f7ff ffd0 	bl	8000340 <deselectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80003a0:	2201      	movs	r2, #1
 80003a2:	4933      	ldr	r1, [pc, #204]	; (8000470 <sdPowerUp+0x100>)
 80003a4:	4831      	ldr	r0, [pc, #196]	; (800046c <sdPowerUp+0xfc>)
 80003a6:	f000 fed8 	bl	800115a <SPI_Send>
	// send CMD0 with CRC
	Data[0] = 0x40 ;
 80003aa:	4b2f      	ldr	r3, [pc, #188]	; (8000468 <sdPowerUp+0xf8>)
 80003ac:	2240      	movs	r2, #64	; 0x40
 80003ae:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x00 ;
 80003b0:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <sdPowerUp+0xf8>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
	Data[2] = 0x00 ;
 80003b6:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <sdPowerUp+0xf8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	709a      	strb	r2, [r3, #2]
	Data[3] = 0x00 ;
 80003bc:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <sdPowerUp+0xf8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	70da      	strb	r2, [r3, #3]
	Data[4] = 0x00 ;
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <sdPowerUp+0xf8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	711a      	strb	r2, [r3, #4]
	Data[5] = 0x95 ;
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <sdPowerUp+0xf8>)
 80003ca:	2295      	movs	r2, #149	; 0x95
 80003cc:	715a      	strb	r2, [r3, #5]

		SPI_Send(SPI2, &dummyByte, 1) ;
 80003ce:	2201      	movs	r2, #1
 80003d0:	4927      	ldr	r1, [pc, #156]	; (8000470 <sdPowerUp+0x100>)
 80003d2:	4826      	ldr	r0, [pc, #152]	; (800046c <sdPowerUp+0xfc>)
 80003d4:	f000 fec1 	bl	800115a <SPI_Send>
		// delay some time
		for (uint16_t i = 0;  i < 1000; i++) {}
 80003d8:	2300      	movs	r3, #0
 80003da:	80bb      	strh	r3, [r7, #4]
 80003dc:	e002      	b.n	80003e4 <sdPowerUp+0x74>
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	3301      	adds	r3, #1
 80003e2:	80bb      	strh	r3, [r7, #4]
 80003e4:	88bb      	ldrh	r3, [r7, #4]
 80003e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003ea:	d3f8      	bcc.n	80003de <sdPowerUp+0x6e>
		selectSDcard() ;
 80003ec:	f7ff ffb4 	bl	8000358 <selectSDcard>
		SPI_Send(SPI2, &dummyByte, 1) ;
 80003f0:	2201      	movs	r2, #1
 80003f2:	491f      	ldr	r1, [pc, #124]	; (8000470 <sdPowerUp+0x100>)
 80003f4:	481d      	ldr	r0, [pc, #116]	; (800046c <sdPowerUp+0xfc>)
 80003f6:	f000 feb0 	bl	800115a <SPI_Send>

	// send CMD0 wait for 1 byte R1 response
	SPI_Send(SPI2, Data, 6) ;
 80003fa:	2206      	movs	r2, #6
 80003fc:	491a      	ldr	r1, [pc, #104]	; (8000468 <sdPowerUp+0xf8>)
 80003fe:	481b      	ldr	r0, [pc, #108]	; (800046c <sdPowerUp+0xfc>)
 8000400:	f000 feab 	bl	800115a <SPI_Send>
	// send some clock to get the R1 response towards master

	while (R1_Response != 0x01) {
 8000404:	e00f      	b.n	8000426 <sdPowerUp+0xb6>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000406:	2201      	movs	r2, #1
 8000408:	4919      	ldr	r1, [pc, #100]	; (8000470 <sdPowerUp+0x100>)
 800040a:	4818      	ldr	r0, [pc, #96]	; (800046c <sdPowerUp+0xfc>)
 800040c:	f000 fea5 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &R1_Response, 1) ;
 8000410:	1c7b      	adds	r3, r7, #1
 8000412:	2201      	movs	r2, #1
 8000414:	4619      	mov	r1, r3
 8000416:	4815      	ldr	r0, [pc, #84]	; (800046c <sdPowerUp+0xfc>)
 8000418:	f000 fed6 	bl	80011c8 <SPI_Read>
	printf("%d\n" , R1_Response) ;
 800041c:	787b      	ldrb	r3, [r7, #1]
 800041e:	4619      	mov	r1, r3
 8000420:	4814      	ldr	r0, [pc, #80]	; (8000474 <sdPowerUp+0x104>)
 8000422:	f001 fa77 	bl	8001914 <iprintf>
	while (R1_Response != 0x01) {
 8000426:	787b      	ldrb	r3, [r7, #1]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d1ec      	bne.n	8000406 <sdPowerUp+0x96>
	}

	SPI_Send(SPI2, &dummyByte, 1) ;
 800042c:	2201      	movs	r2, #1
 800042e:	4910      	ldr	r1, [pc, #64]	; (8000470 <sdPowerUp+0x100>)
 8000430:	480e      	ldr	r0, [pc, #56]	; (800046c <sdPowerUp+0xfc>)
 8000432:	f000 fe92 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000436:	2300      	movs	r3, #0
 8000438:	807b      	strh	r3, [r7, #2]
 800043a:	e002      	b.n	8000442 <sdPowerUp+0xd2>
 800043c:	887b      	ldrh	r3, [r7, #2]
 800043e:	3301      	adds	r3, #1
 8000440:	807b      	strh	r3, [r7, #2]
 8000442:	887b      	ldrh	r3, [r7, #2]
 8000444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000448:	d3f8      	bcc.n	800043c <sdPowerUp+0xcc>
	deselectSDcard();
 800044a:	f7ff ff79 	bl	8000340 <deselectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 800044e:	2201      	movs	r2, #1
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <sdPowerUp+0x100>)
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <sdPowerUp+0xfc>)
 8000454:	f000 fe81 	bl	800115a <SPI_Send>
		printf("CMD0 r1 ideal \n") ;
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <sdPowerUp+0x108>)
 800045a:	f001 fae1 	bl	8001a20 <puts>

}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000000 	.word	0x20000000
 800046c:	40003800 	.word	0x40003800
 8000470:	2000000a 	.word	0x2000000a
 8000474:	080028bc 	.word	0x080028bc
 8000478:	080028c0 	.word	0x080028c0

0800047c <sdInitSeq>:

void sdInitSeq(){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	uint8_t res7 = 0 ;
 8000482:	2300      	movs	r3, #0
 8000484:	70fb      	strb	r3, [r7, #3]
	printf("CMD8 \n ") ;
 8000486:	485a      	ldr	r0, [pc, #360]	; (80005f0 <sdInitSeq+0x174>)
 8000488:	f001 fa44 	bl	8001914 <iprintf>
	Data[0] = 0x48 ;
 800048c:	4b59      	ldr	r3, [pc, #356]	; (80005f4 <sdInitSeq+0x178>)
 800048e:	2248      	movs	r2, #72	; 0x48
 8000490:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x00 ;
 8000492:	4b58      	ldr	r3, [pc, #352]	; (80005f4 <sdInitSeq+0x178>)
 8000494:	2200      	movs	r2, #0
 8000496:	705a      	strb	r2, [r3, #1]
	Data[2] = 0x00 ;
 8000498:	4b56      	ldr	r3, [pc, #344]	; (80005f4 <sdInitSeq+0x178>)
 800049a:	2200      	movs	r2, #0
 800049c:	709a      	strb	r2, [r3, #2]
	Data[3] = 0x01 ;
 800049e:	4b55      	ldr	r3, [pc, #340]	; (80005f4 <sdInitSeq+0x178>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	70da      	strb	r2, [r3, #3]
	Data[4] = 0xAA ;
 80004a4:	4b53      	ldr	r3, [pc, #332]	; (80005f4 <sdInitSeq+0x178>)
 80004a6:	22aa      	movs	r2, #170	; 0xaa
 80004a8:	711a      	strb	r2, [r3, #4]
	Data[5] = (0x86 | 0x01) ;
 80004aa:	4b52      	ldr	r3, [pc, #328]	; (80005f4 <sdInitSeq+0x178>)
 80004ac:	2287      	movs	r2, #135	; 0x87
 80004ae:	715a      	strb	r2, [r3, #5]

	SPI_Send(SPI2, &dummyByte, 1) ;
 80004b0:	2201      	movs	r2, #1
 80004b2:	4951      	ldr	r1, [pc, #324]	; (80005f8 <sdInitSeq+0x17c>)
 80004b4:	4851      	ldr	r0, [pc, #324]	; (80005fc <sdInitSeq+0x180>)
 80004b6:	f000 fe50 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 80004ba:	2300      	movs	r3, #0
 80004bc:	80fb      	strh	r3, [r7, #6]
 80004be:	e002      	b.n	80004c6 <sdInitSeq+0x4a>
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	3301      	adds	r3, #1
 80004c4:	80fb      	strh	r3, [r7, #6]
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004cc:	d3f8      	bcc.n	80004c0 <sdInitSeq+0x44>
	selectSDcard() ;
 80004ce:	f7ff ff43 	bl	8000358 <selectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80004d2:	2201      	movs	r2, #1
 80004d4:	4948      	ldr	r1, [pc, #288]	; (80005f8 <sdInitSeq+0x17c>)
 80004d6:	4849      	ldr	r0, [pc, #292]	; (80005fc <sdInitSeq+0x180>)
 80004d8:	f000 fe3f 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, Data, 6);
 80004dc:	2206      	movs	r2, #6
 80004de:	4945      	ldr	r1, [pc, #276]	; (80005f4 <sdInitSeq+0x178>)
 80004e0:	4846      	ldr	r0, [pc, #280]	; (80005fc <sdInitSeq+0x180>)
 80004e2:	f000 fe3a 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, &dummyByte, 1) ;
 80004e6:	2201      	movs	r2, #1
 80004e8:	4943      	ldr	r1, [pc, #268]	; (80005f8 <sdInitSeq+0x17c>)
 80004ea:	4844      	ldr	r0, [pc, #272]	; (80005fc <sdInitSeq+0x180>)
 80004ec:	f000 fe35 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 80004f0:	1cfb      	adds	r3, r7, #3
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	4841      	ldr	r0, [pc, #260]	; (80005fc <sdInitSeq+0x180>)
 80004f8:	f000 fe66 	bl	80011c8 <SPI_Read>
	printf("1 %p \n" , res7) ;
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	4619      	mov	r1, r3
 8000500:	483f      	ldr	r0, [pc, #252]	; (8000600 <sdInitSeq+0x184>)
 8000502:	f001 fa07 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000506:	2201      	movs	r2, #1
 8000508:	493b      	ldr	r1, [pc, #236]	; (80005f8 <sdInitSeq+0x17c>)
 800050a:	483c      	ldr	r0, [pc, #240]	; (80005fc <sdInitSeq+0x180>)
 800050c:	f000 fe25 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 8000510:	1cfb      	adds	r3, r7, #3
 8000512:	2201      	movs	r2, #1
 8000514:	4619      	mov	r1, r3
 8000516:	4839      	ldr	r0, [pc, #228]	; (80005fc <sdInitSeq+0x180>)
 8000518:	f000 fe56 	bl	80011c8 <SPI_Read>
	printf("2 %p \n" , res7) ;
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	4619      	mov	r1, r3
 8000520:	4838      	ldr	r0, [pc, #224]	; (8000604 <sdInitSeq+0x188>)
 8000522:	f001 f9f7 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000526:	2201      	movs	r2, #1
 8000528:	4933      	ldr	r1, [pc, #204]	; (80005f8 <sdInitSeq+0x17c>)
 800052a:	4834      	ldr	r0, [pc, #208]	; (80005fc <sdInitSeq+0x180>)
 800052c:	f000 fe15 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 8000530:	1cfb      	adds	r3, r7, #3
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	4831      	ldr	r0, [pc, #196]	; (80005fc <sdInitSeq+0x180>)
 8000538:	f000 fe46 	bl	80011c8 <SPI_Read>
	printf("3 %p \n" , res7) ;
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	4619      	mov	r1, r3
 8000540:	4831      	ldr	r0, [pc, #196]	; (8000608 <sdInitSeq+0x18c>)
 8000542:	f001 f9e7 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000546:	2201      	movs	r2, #1
 8000548:	492b      	ldr	r1, [pc, #172]	; (80005f8 <sdInitSeq+0x17c>)
 800054a:	482c      	ldr	r0, [pc, #176]	; (80005fc <sdInitSeq+0x180>)
 800054c:	f000 fe05 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 8000550:	1cfb      	adds	r3, r7, #3
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4829      	ldr	r0, [pc, #164]	; (80005fc <sdInitSeq+0x180>)
 8000558:	f000 fe36 	bl	80011c8 <SPI_Read>
	printf("4 %p \n" , res7) ;
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	4619      	mov	r1, r3
 8000560:	482a      	ldr	r0, [pc, #168]	; (800060c <sdInitSeq+0x190>)
 8000562:	f001 f9d7 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000566:	2201      	movs	r2, #1
 8000568:	4923      	ldr	r1, [pc, #140]	; (80005f8 <sdInitSeq+0x17c>)
 800056a:	4824      	ldr	r0, [pc, #144]	; (80005fc <sdInitSeq+0x180>)
 800056c:	f000 fdf5 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 8000570:	1cfb      	adds	r3, r7, #3
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	4821      	ldr	r0, [pc, #132]	; (80005fc <sdInitSeq+0x180>)
 8000578:	f000 fe26 	bl	80011c8 <SPI_Read>
	printf("5 %p \n" , res7) ;
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	4619      	mov	r1, r3
 8000580:	4823      	ldr	r0, [pc, #140]	; (8000610 <sdInitSeq+0x194>)
 8000582:	f001 f9c7 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000586:	2201      	movs	r2, #1
 8000588:	491b      	ldr	r1, [pc, #108]	; (80005f8 <sdInitSeq+0x17c>)
 800058a:	481c      	ldr	r0, [pc, #112]	; (80005fc <sdInitSeq+0x180>)
 800058c:	f000 fde5 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 8000590:	1cfb      	adds	r3, r7, #3
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	4819      	ldr	r0, [pc, #100]	; (80005fc <sdInitSeq+0x180>)
 8000598:	f000 fe16 	bl	80011c8 <SPI_Read>
	printf("6 %p \n" , res7) ;
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	4619      	mov	r1, r3
 80005a0:	481c      	ldr	r0, [pc, #112]	; (8000614 <sdInitSeq+0x198>)
 80005a2:	f001 f9b7 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80005a6:	2201      	movs	r2, #1
 80005a8:	4913      	ldr	r1, [pc, #76]	; (80005f8 <sdInitSeq+0x17c>)
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <sdInitSeq+0x180>)
 80005ac:	f000 fdd5 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res7, 1) ;
 80005b0:	1cfb      	adds	r3, r7, #3
 80005b2:	2201      	movs	r2, #1
 80005b4:	4619      	mov	r1, r3
 80005b6:	4811      	ldr	r0, [pc, #68]	; (80005fc <sdInitSeq+0x180>)
 80005b8:	f000 fe06 	bl	80011c8 <SPI_Read>
	printf("7 %p \n" , res7) ;
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	4619      	mov	r1, r3
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <sdInitSeq+0x19c>)
 80005c2:	f001 f9a7 	bl	8001914 <iprintf>

	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 80005c6:	2300      	movs	r3, #0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	e002      	b.n	80005d2 <sdInitSeq+0x156>
 80005cc:	88bb      	ldrh	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d8:	d3f8      	bcc.n	80005cc <sdInitSeq+0x150>
	deselectSDcard();
 80005da:	f7ff feb1 	bl	8000340 <deselectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80005de:	2201      	movs	r2, #1
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <sdInitSeq+0x17c>)
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <sdInitSeq+0x180>)
 80005e4:	f000 fdb9 	bl	800115a <SPI_Send>

}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	080028d0 	.word	0x080028d0
 80005f4:	20000000 	.word	0x20000000
 80005f8:	2000000a 	.word	0x2000000a
 80005fc:	40003800 	.word	0x40003800
 8000600:	080028d8 	.word	0x080028d8
 8000604:	080028e0 	.word	0x080028e0
 8000608:	080028e8 	.word	0x080028e8
 800060c:	080028f0 	.word	0x080028f0
 8000610:	080028f8 	.word	0x080028f8
 8000614:	08002900 	.word	0x08002900
 8000618:	08002908 	.word	0x08002908

0800061c <readOCR>:

void readOCR() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
uint8_t res3 ;
	printf("CMD58 \n ") ;
 8000622:	485a      	ldr	r0, [pc, #360]	; (800078c <readOCR+0x170>)
 8000624:	f001 f976 	bl	8001914 <iprintf>
	Data[0] = 0x7A ;
 8000628:	4b59      	ldr	r3, [pc, #356]	; (8000790 <readOCR+0x174>)
 800062a:	227a      	movs	r2, #122	; 0x7a
 800062c:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x00 ;
 800062e:	4b58      	ldr	r3, [pc, #352]	; (8000790 <readOCR+0x174>)
 8000630:	2200      	movs	r2, #0
 8000632:	705a      	strb	r2, [r3, #1]
	Data[2] = 0x00 ;
 8000634:	4b56      	ldr	r3, [pc, #344]	; (8000790 <readOCR+0x174>)
 8000636:	2200      	movs	r2, #0
 8000638:	709a      	strb	r2, [r3, #2]
	Data[3] = 0x00 ;
 800063a:	4b55      	ldr	r3, [pc, #340]	; (8000790 <readOCR+0x174>)
 800063c:	2200      	movs	r2, #0
 800063e:	70da      	strb	r2, [r3, #3]
	Data[4] = 0x00 ;
 8000640:	4b53      	ldr	r3, [pc, #332]	; (8000790 <readOCR+0x174>)
 8000642:	2200      	movs	r2, #0
 8000644:	711a      	strb	r2, [r3, #4]
	Data[5] = (0x00 | 0x01) ;
 8000646:	4b52      	ldr	r3, [pc, #328]	; (8000790 <readOCR+0x174>)
 8000648:	2201      	movs	r2, #1
 800064a:	715a      	strb	r2, [r3, #5]

	SPI_Send(SPI2, &dummyByte, 1) ;
 800064c:	2201      	movs	r2, #1
 800064e:	4951      	ldr	r1, [pc, #324]	; (8000794 <readOCR+0x178>)
 8000650:	4851      	ldr	r0, [pc, #324]	; (8000798 <readOCR+0x17c>)
 8000652:	f000 fd82 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000656:	2300      	movs	r3, #0
 8000658:	80fb      	strh	r3, [r7, #6]
 800065a:	e002      	b.n	8000662 <readOCR+0x46>
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	3301      	adds	r3, #1
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000668:	d3f8      	bcc.n	800065c <readOCR+0x40>
	selectSDcard() ;
 800066a:	f7ff fe75 	bl	8000358 <selectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 800066e:	2201      	movs	r2, #1
 8000670:	4948      	ldr	r1, [pc, #288]	; (8000794 <readOCR+0x178>)
 8000672:	4849      	ldr	r0, [pc, #292]	; (8000798 <readOCR+0x17c>)
 8000674:	f000 fd71 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, Data, 6) ;
 8000678:	2206      	movs	r2, #6
 800067a:	4945      	ldr	r1, [pc, #276]	; (8000790 <readOCR+0x174>)
 800067c:	4846      	ldr	r0, [pc, #280]	; (8000798 <readOCR+0x17c>)
 800067e:	f000 fd6c 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000682:	2201      	movs	r2, #1
 8000684:	4943      	ldr	r1, [pc, #268]	; (8000794 <readOCR+0x178>)
 8000686:	4844      	ldr	r0, [pc, #272]	; (8000798 <readOCR+0x17c>)
 8000688:	f000 fd67 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 800068c:	1cfb      	adds	r3, r7, #3
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	4841      	ldr	r0, [pc, #260]	; (8000798 <readOCR+0x17c>)
 8000694:	f000 fd98 	bl	80011c8 <SPI_Read>
	printf("1 %p \n" , res3) ;
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	4619      	mov	r1, r3
 800069c:	483f      	ldr	r0, [pc, #252]	; (800079c <readOCR+0x180>)
 800069e:	f001 f939 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80006a2:	2201      	movs	r2, #1
 80006a4:	493b      	ldr	r1, [pc, #236]	; (8000794 <readOCR+0x178>)
 80006a6:	483c      	ldr	r0, [pc, #240]	; (8000798 <readOCR+0x17c>)
 80006a8:	f000 fd57 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 80006ac:	1cfb      	adds	r3, r7, #3
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	4839      	ldr	r0, [pc, #228]	; (8000798 <readOCR+0x17c>)
 80006b4:	f000 fd88 	bl	80011c8 <SPI_Read>
	printf("2 %p \n" , res3) ;
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4838      	ldr	r0, [pc, #224]	; (80007a0 <readOCR+0x184>)
 80006be:	f001 f929 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80006c2:	2201      	movs	r2, #1
 80006c4:	4933      	ldr	r1, [pc, #204]	; (8000794 <readOCR+0x178>)
 80006c6:	4834      	ldr	r0, [pc, #208]	; (8000798 <readOCR+0x17c>)
 80006c8:	f000 fd47 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 80006cc:	1cfb      	adds	r3, r7, #3
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	4831      	ldr	r0, [pc, #196]	; (8000798 <readOCR+0x17c>)
 80006d4:	f000 fd78 	bl	80011c8 <SPI_Read>
	printf("3 %p \n" , res3) ;
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	4619      	mov	r1, r3
 80006dc:	4831      	ldr	r0, [pc, #196]	; (80007a4 <readOCR+0x188>)
 80006de:	f001 f919 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 80006e2:	2201      	movs	r2, #1
 80006e4:	492b      	ldr	r1, [pc, #172]	; (8000794 <readOCR+0x178>)
 80006e6:	482c      	ldr	r0, [pc, #176]	; (8000798 <readOCR+0x17c>)
 80006e8:	f000 fd37 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 80006ec:	1cfb      	adds	r3, r7, #3
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	4829      	ldr	r0, [pc, #164]	; (8000798 <readOCR+0x17c>)
 80006f4:	f000 fd68 	bl	80011c8 <SPI_Read>
	printf("4 %p \n" , res3) ;
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	4619      	mov	r1, r3
 80006fc:	482a      	ldr	r0, [pc, #168]	; (80007a8 <readOCR+0x18c>)
 80006fe:	f001 f909 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000702:	2201      	movs	r2, #1
 8000704:	4923      	ldr	r1, [pc, #140]	; (8000794 <readOCR+0x178>)
 8000706:	4824      	ldr	r0, [pc, #144]	; (8000798 <readOCR+0x17c>)
 8000708:	f000 fd27 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 800070c:	1cfb      	adds	r3, r7, #3
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	4821      	ldr	r0, [pc, #132]	; (8000798 <readOCR+0x17c>)
 8000714:	f000 fd58 	bl	80011c8 <SPI_Read>
	printf("5 %p \n" , res3) ;
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	4619      	mov	r1, r3
 800071c:	4823      	ldr	r0, [pc, #140]	; (80007ac <readOCR+0x190>)
 800071e:	f001 f8f9 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000722:	2201      	movs	r2, #1
 8000724:	491b      	ldr	r1, [pc, #108]	; (8000794 <readOCR+0x178>)
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <readOCR+0x17c>)
 8000728:	f000 fd17 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 800072c:	1cfb      	adds	r3, r7, #3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	4819      	ldr	r0, [pc, #100]	; (8000798 <readOCR+0x17c>)
 8000734:	f000 fd48 	bl	80011c8 <SPI_Read>
	printf("6 %p \n" , res3) ;
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	4619      	mov	r1, r3
 800073c:	481c      	ldr	r0, [pc, #112]	; (80007b0 <readOCR+0x194>)
 800073e:	f001 f8e9 	bl	8001914 <iprintf>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000742:	2201      	movs	r2, #1
 8000744:	4913      	ldr	r1, [pc, #76]	; (8000794 <readOCR+0x178>)
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <readOCR+0x17c>)
 8000748:	f000 fd07 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res3, 1) ;
 800074c:	1cfb      	adds	r3, r7, #3
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <readOCR+0x17c>)
 8000754:	f000 fd38 	bl	80011c8 <SPI_Read>
	printf("7 %p \n" , res3) ;
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	4619      	mov	r1, r3
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <readOCR+0x198>)
 800075e:	f001 f8d9 	bl	8001914 <iprintf>

	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000762:	2300      	movs	r3, #0
 8000764:	80bb      	strh	r3, [r7, #4]
 8000766:	e002      	b.n	800076e <readOCR+0x152>
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	80bb      	strh	r3, [r7, #4]
 800076e:	88bb      	ldrh	r3, [r7, #4]
 8000770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000774:	d3f8      	bcc.n	8000768 <readOCR+0x14c>
	deselectSDcard();
 8000776:	f7ff fde3 	bl	8000340 <deselectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 800077a:	2201      	movs	r2, #1
 800077c:	4905      	ldr	r1, [pc, #20]	; (8000794 <readOCR+0x178>)
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <readOCR+0x17c>)
 8000780:	f000 fceb 	bl	800115a <SPI_Send>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08002910 	.word	0x08002910
 8000790:	20000000 	.word	0x20000000
 8000794:	2000000a 	.word	0x2000000a
 8000798:	40003800 	.word	0x40003800
 800079c:	080028d8 	.word	0x080028d8
 80007a0:	080028e0 	.word	0x080028e0
 80007a4:	080028e8 	.word	0x080028e8
 80007a8:	080028f0 	.word	0x080028f0
 80007ac:	080028f8 	.word	0x080028f8
 80007b0:	08002900 	.word	0x08002900
 80007b4:	08002908 	.word	0x08002908

080007b8 <sd_final_Init>:

void sd_final_Init(uint8_t cardType){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	SPI_PeripheralControl(SPI2, DISABLE) ;
 80007c2:	2100      	movs	r1, #0
 80007c4:	487f      	ldr	r0, [pc, #508]	; (80009c4 <sd_final_Init+0x20c>)
 80007c6:	f000 fd49 	bl	800125c <SPI_PeripheralControl>
	deselectSDcard();
 80007ca:	f7ff fdb9 	bl	8000340 <deselectSDcard>
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 80007ce:	4b7d      	ldr	r3, [pc, #500]	; (80009c4 <sd_final_Init+0x20c>)
 80007d0:	613b      	str	r3, [r7, #16]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80007d2:	2301      	movs	r3, #1
 80007d4:	757b      	strb	r3, [r7, #21]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80007d6:	2301      	movs	r3, #1
 80007d8:	753b      	strb	r3, [r7, #20]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;//generates sclk of 8MHz
 80007da:	2302      	movs	r3, #2
 80007dc:	75bb      	strb	r3, [r7, #22]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80007de:	2300      	movs	r3, #0
 80007e0:	75fb      	strb	r3, [r7, #23]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	763b      	strb	r3, [r7, #24]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	767b      	strb	r3, [r7, #25]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 80007ea:	2301      	movs	r3, #1
 80007ec:	76bb      	strb	r3, [r7, #26]

	SPI_Init(&SPI2handle);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fc56 	bl	80010a4 <SPI_Init>

	SPI_SSIConfig(SPI2, ENABLE) ;	// mandate for software slave management
 80007f8:	2101      	movs	r1, #1
 80007fa:	4872      	ldr	r0, [pc, #456]	; (80009c4 <sd_final_Init+0x20c>)
 80007fc:	f000 fd49 	bl	8001292 <SPI_SSIConfig>
	// enable the spi peripheral
	SPI_PeripheralControl(SPI2, ENABLE) ; // enable spi2 for communiation
 8000800:	2101      	movs	r1, #1
 8000802:	4870      	ldr	r0, [pc, #448]	; (80009c4 <sd_final_Init+0x20c>)
 8000804:	f000 fd2a 	bl	800125c <SPI_PeripheralControl>

uint8_t res1 = 0xff ;
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	73fb      	strb	r3, [r7, #15]
while(res1 != 0x00){
 800080c:	e0cf      	b.n	80009ae <sd_final_Init+0x1f6>

printf("CMD55 \n") ;
 800080e:	486e      	ldr	r0, [pc, #440]	; (80009c8 <sd_final_Init+0x210>)
 8000810:	f001 f906 	bl	8001a20 <puts>
Data[0] = 	0x77 ;
 8000814:	4b6d      	ldr	r3, [pc, #436]	; (80009cc <sd_final_Init+0x214>)
 8000816:	2277      	movs	r2, #119	; 0x77
 8000818:	701a      	strb	r2, [r3, #0]
Data[1] = 	0x00 ;
 800081a:	4b6c      	ldr	r3, [pc, #432]	; (80009cc <sd_final_Init+0x214>)
 800081c:	2200      	movs	r2, #0
 800081e:	705a      	strb	r2, [r3, #1]
Data[2] = 	0x00 ;
 8000820:	4b6a      	ldr	r3, [pc, #424]	; (80009cc <sd_final_Init+0x214>)
 8000822:	2200      	movs	r2, #0
 8000824:	709a      	strb	r2, [r3, #2]
Data[3] = 	0x00 ;
 8000826:	4b69      	ldr	r3, [pc, #420]	; (80009cc <sd_final_Init+0x214>)
 8000828:	2200      	movs	r2, #0
 800082a:	70da      	strb	r2, [r3, #3]
Data[4] = 	0x00 ;
 800082c:	4b67      	ldr	r3, [pc, #412]	; (80009cc <sd_final_Init+0x214>)
 800082e:	2200      	movs	r2, #0
 8000830:	711a      	strb	r2, [r3, #4]
Data[5] =   (0x00 | 0x01);
 8000832:	4b66      	ldr	r3, [pc, #408]	; (80009cc <sd_final_Init+0x214>)
 8000834:	2201      	movs	r2, #1
 8000836:	715a      	strb	r2, [r3, #5]

SPI_Send(SPI2, &dummyByte, 1) ;
 8000838:	2201      	movs	r2, #1
 800083a:	4965      	ldr	r1, [pc, #404]	; (80009d0 <sd_final_Init+0x218>)
 800083c:	4861      	ldr	r0, [pc, #388]	; (80009c4 <sd_final_Init+0x20c>)
 800083e:	f000 fc8c 	bl	800115a <SPI_Send>
// delay some time
for (uint16_t i = 0;  i < 1000; i++) {}
 8000842:	2300      	movs	r3, #0
 8000844:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000846:	e002      	b.n	800084e <sd_final_Init+0x96>
 8000848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800084a:	3301      	adds	r3, #1
 800084c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800084e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000854:	d3f8      	bcc.n	8000848 <sd_final_Init+0x90>
selectSDcard() ;
 8000856:	f7ff fd7f 	bl	8000358 <selectSDcard>
SPI_Send(SPI2, &dummyByte, 1) ;
 800085a:	2201      	movs	r2, #1
 800085c:	495c      	ldr	r1, [pc, #368]	; (80009d0 <sd_final_Init+0x218>)
 800085e:	4859      	ldr	r0, [pc, #356]	; (80009c4 <sd_final_Init+0x20c>)
 8000860:	f000 fc7b 	bl	800115a <SPI_Send>

//ACMD55
SPI_Send(SPI2, Data, 6);
 8000864:	2206      	movs	r2, #6
 8000866:	4959      	ldr	r1, [pc, #356]	; (80009cc <sd_final_Init+0x214>)
 8000868:	4856      	ldr	r0, [pc, #344]	; (80009c4 <sd_final_Init+0x20c>)
 800086a:	f000 fc76 	bl	800115a <SPI_Send>

SPI_Send(SPI2, &dummyByte, 1) ;
 800086e:	2201      	movs	r2, #1
 8000870:	4957      	ldr	r1, [pc, #348]	; (80009d0 <sd_final_Init+0x218>)
 8000872:	4854      	ldr	r0, [pc, #336]	; (80009c4 <sd_final_Init+0x20c>)
 8000874:	f000 fc71 	bl	800115a <SPI_Send>
SPI_Read(SPI2, &res1, 1) ;
 8000878:	f107 030f 	add.w	r3, r7, #15
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	4850      	ldr	r0, [pc, #320]	; (80009c4 <sd_final_Init+0x20c>)
 8000882:	f000 fca1 	bl	80011c8 <SPI_Read>
printf("1 %p \n" , res1) ;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	4619      	mov	r1, r3
 800088a:	4852      	ldr	r0, [pc, #328]	; (80009d4 <sd_final_Init+0x21c>)
 800088c:	f001 f842 	bl	8001914 <iprintf>

SPI_Send(SPI2, &dummyByte, 1) ;
 8000890:	2201      	movs	r2, #1
 8000892:	494f      	ldr	r1, [pc, #316]	; (80009d0 <sd_final_Init+0x218>)
 8000894:	484b      	ldr	r0, [pc, #300]	; (80009c4 <sd_final_Init+0x20c>)
 8000896:	f000 fc60 	bl	800115a <SPI_Send>
SPI_Read(SPI2, &res1, 1) ;
 800089a:	f107 030f 	add.w	r3, r7, #15
 800089e:	2201      	movs	r2, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	4848      	ldr	r0, [pc, #288]	; (80009c4 <sd_final_Init+0x20c>)
 80008a4:	f000 fc90 	bl	80011c8 <SPI_Read>
printf("1 %p \n" , res1) ;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4849      	ldr	r0, [pc, #292]	; (80009d4 <sd_final_Init+0x21c>)
 80008ae:	f001 f831 	bl	8001914 <iprintf>


SPI_Send(SPI2, &dummyByte, 1) ;
 80008b2:	2201      	movs	r2, #1
 80008b4:	4946      	ldr	r1, [pc, #280]	; (80009d0 <sd_final_Init+0x218>)
 80008b6:	4843      	ldr	r0, [pc, #268]	; (80009c4 <sd_final_Init+0x20c>)
 80008b8:	f000 fc4f 	bl	800115a <SPI_Send>
// delay some time
for (uint16_t i = 0;  i < 1000; i++) {}
 80008bc:	2300      	movs	r3, #0
 80008be:	86bb      	strh	r3, [r7, #52]	; 0x34
 80008c0:	e002      	b.n	80008c8 <sd_final_Init+0x110>
 80008c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008c4:	3301      	adds	r3, #1
 80008c6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80008c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008ce:	d3f8      	bcc.n	80008c2 <sd_final_Init+0x10a>
deselectSDcard();
 80008d0:	f7ff fd36 	bl	8000340 <deselectSDcard>
SPI_Send(SPI2, &dummyByte, 1) ;
 80008d4:	2201      	movs	r2, #1
 80008d6:	493e      	ldr	r1, [pc, #248]	; (80009d0 <sd_final_Init+0x218>)
 80008d8:	483a      	ldr	r0, [pc, #232]	; (80009c4 <sd_final_Init+0x20c>)
 80008da:	f000 fc3e 	bl	800115a <SPI_Send>

printf("ACMD41 \n") ;
 80008de:	483e      	ldr	r0, [pc, #248]	; (80009d8 <sd_final_Init+0x220>)
 80008e0:	f001 f89e 	bl	8001a20 <puts>
Data[0] = 	0x69 ;
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <sd_final_Init+0x214>)
 80008e6:	2269      	movs	r2, #105	; 0x69
 80008e8:	701a      	strb	r2, [r3, #0]
Data[1] = 	0x40 ;
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <sd_final_Init+0x214>)
 80008ec:	2240      	movs	r2, #64	; 0x40
 80008ee:	705a      	strb	r2, [r3, #1]
Data[2] = 	0x00 ;
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <sd_final_Init+0x214>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	709a      	strb	r2, [r3, #2]
Data[3] = 	0x00 ;
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <sd_final_Init+0x214>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	70da      	strb	r2, [r3, #3]
Data[4] = 	0x00 ;
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <sd_final_Init+0x214>)
 80008fe:	2200      	movs	r2, #0
 8000900:	711a      	strb	r2, [r3, #4]
Data[5] =   (0x00 | 0x01);
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <sd_final_Init+0x214>)
 8000904:	2201      	movs	r2, #1
 8000906:	715a      	strb	r2, [r3, #5]

SPI_Send(SPI2, &dummyByte, 1) ;
 8000908:	2201      	movs	r2, #1
 800090a:	4931      	ldr	r1, [pc, #196]	; (80009d0 <sd_final_Init+0x218>)
 800090c:	482d      	ldr	r0, [pc, #180]	; (80009c4 <sd_final_Init+0x20c>)
 800090e:	f000 fc24 	bl	800115a <SPI_Send>
// delay some time
for (uint16_t i = 0;  i < 1000; i++) {}
 8000912:	2300      	movs	r3, #0
 8000914:	867b      	strh	r3, [r7, #50]	; 0x32
 8000916:	e002      	b.n	800091e <sd_final_Init+0x166>
 8000918:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800091a:	3301      	adds	r3, #1
 800091c:	867b      	strh	r3, [r7, #50]	; 0x32
 800091e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000924:	d3f8      	bcc.n	8000918 <sd_final_Init+0x160>
selectSDcard() ;
 8000926:	f7ff fd17 	bl	8000358 <selectSDcard>
SPI_Send(SPI2, &dummyByte, 1) ;
 800092a:	2201      	movs	r2, #1
 800092c:	4928      	ldr	r1, [pc, #160]	; (80009d0 <sd_final_Init+0x218>)
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <sd_final_Init+0x20c>)
 8000930:	f000 fc13 	bl	800115a <SPI_Send>

//ACMD41
SPI_Send(SPI2, Data, 6);
 8000934:	2206      	movs	r2, #6
 8000936:	4925      	ldr	r1, [pc, #148]	; (80009cc <sd_final_Init+0x214>)
 8000938:	4822      	ldr	r0, [pc, #136]	; (80009c4 <sd_final_Init+0x20c>)
 800093a:	f000 fc0e 	bl	800115a <SPI_Send>

SPI_Send(SPI2, &dummyByte, 1) ;
 800093e:	2201      	movs	r2, #1
 8000940:	4923      	ldr	r1, [pc, #140]	; (80009d0 <sd_final_Init+0x218>)
 8000942:	4820      	ldr	r0, [pc, #128]	; (80009c4 <sd_final_Init+0x20c>)
 8000944:	f000 fc09 	bl	800115a <SPI_Send>
SPI_Read(SPI2, &res1, 1) ;
 8000948:	f107 030f 	add.w	r3, r7, #15
 800094c:	2201      	movs	r2, #1
 800094e:	4619      	mov	r1, r3
 8000950:	481c      	ldr	r0, [pc, #112]	; (80009c4 <sd_final_Init+0x20c>)
 8000952:	f000 fc39 	bl	80011c8 <SPI_Read>
printf("1 %p \n" , res1) ;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	4619      	mov	r1, r3
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <sd_final_Init+0x21c>)
 800095c:	f000 ffda 	bl	8001914 <iprintf>

SPI_Send(SPI2, &dummyByte, 1) ;
 8000960:	2201      	movs	r2, #1
 8000962:	491b      	ldr	r1, [pc, #108]	; (80009d0 <sd_final_Init+0x218>)
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <sd_final_Init+0x20c>)
 8000966:	f000 fbf8 	bl	800115a <SPI_Send>
SPI_Read(SPI2, &res1, 1) ;
 800096a:	f107 030f 	add.w	r3, r7, #15
 800096e:	2201      	movs	r2, #1
 8000970:	4619      	mov	r1, r3
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <sd_final_Init+0x20c>)
 8000974:	f000 fc28 	bl	80011c8 <SPI_Read>
printf("1 %p \n" , res1) ;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <sd_final_Init+0x21c>)
 800097e:	f000 ffc9 	bl	8001914 <iprintf>


SPI_Send(SPI2, &dummyByte, 1) ;
 8000982:	2201      	movs	r2, #1
 8000984:	4912      	ldr	r1, [pc, #72]	; (80009d0 <sd_final_Init+0x218>)
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <sd_final_Init+0x20c>)
 8000988:	f000 fbe7 	bl	800115a <SPI_Send>
// delay some time
for (uint16_t i = 0;  i < 1000; i++) {}
 800098c:	2300      	movs	r3, #0
 800098e:	863b      	strh	r3, [r7, #48]	; 0x30
 8000990:	e002      	b.n	8000998 <sd_final_Init+0x1e0>
 8000992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000994:	3301      	adds	r3, #1
 8000996:	863b      	strh	r3, [r7, #48]	; 0x30
 8000998:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800099a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800099e:	d3f8      	bcc.n	8000992 <sd_final_Init+0x1da>
deselectSDcard();
 80009a0:	f7ff fcce 	bl	8000340 <deselectSDcard>
SPI_Send(SPI2, &dummyByte, 1) ;
 80009a4:	2201      	movs	r2, #1
 80009a6:	490a      	ldr	r1, [pc, #40]	; (80009d0 <sd_final_Init+0x218>)
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <sd_final_Init+0x20c>)
 80009aa:	f000 fbd6 	bl	800115a <SPI_Send>
while(res1 != 0x00){
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f af2c 	bne.w	800080e <sd_final_Init+0x56>

  }
printf("Init Success \n ") ;
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <sd_final_Init+0x224>)
 80009b8:	f000 ffac 	bl	8001914 <iprintf>
}
 80009bc:	bf00      	nop
 80009be:	3738      	adds	r7, #56	; 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40003800 	.word	0x40003800
 80009c8:	0800291c 	.word	0x0800291c
 80009cc:	20000000 	.word	0x20000000
 80009d0:	2000000a 	.word	0x2000000a
 80009d4:	080028d8 	.word	0x080028d8
 80009d8:	08002924 	.word	0x08002924
 80009dc:	0800292c 	.word	0x0800292c

080009e0 <prepReadWrite>:

void prepReadWrite(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
	SPI_PeripheralControl(SPI2, DISABLE) ;
 80009e6:	2100      	movs	r1, #0
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <prepReadWrite+0x50>)
 80009ea:	f000 fc37 	bl	800125c <SPI_PeripheralControl>
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <prepReadWrite+0x50>)
 80009f0:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80009f2:	2301      	movs	r3, #1
 80009f4:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80009f6:	2301      	movs	r3, #1
 80009f8:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 80009fa:	2300      	movs	r3, #0
 80009fc:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fb47 	bl	80010a4 <SPI_Init>

	SPI_SSIConfig(SPI2, ENABLE) ;	// mandate for software slave management
 8000a16:	2101      	movs	r1, #1
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <prepReadWrite+0x50>)
 8000a1a:	f000 fc3a 	bl	8001292 <SPI_SSIConfig>
	// enable the spi peripheral
	SPI_PeripheralControl(SPI2, ENABLE) ; // enable spi2 for communiation
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <prepReadWrite+0x50>)
 8000a22:	f000 fc1b 	bl	800125c <SPI_PeripheralControl>

}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40003800 	.word	0x40003800

08000a34 <readBlockSingle>:

void readBlockSingle(uint32_t blockIndex ){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
uint8_t res1 = 0xff ;
 8000a3c:	23ff      	movs	r3, #255	; 0xff
 8000a3e:	73fb      	strb	r3, [r7, #15]
	printf("CMD17\n") ;
 8000a40:	4866      	ldr	r0, [pc, #408]	; (8000bdc <readBlockSingle+0x1a8>)
 8000a42:	f000 ffed 	bl	8001a20 <puts>
	Data[0] = 	0x51 ;
 8000a46:	4b66      	ldr	r3, [pc, #408]	; (8000be0 <readBlockSingle+0x1ac>)
 8000a48:	2251      	movs	r2, #81	; 0x51
 8000a4a:	701a      	strb	r2, [r3, #0]
	Data[1] = 	(blockIndex >> 24) ;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	0e1b      	lsrs	r3, r3, #24
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b63      	ldr	r3, [pc, #396]	; (8000be0 <readBlockSingle+0x1ac>)
 8000a54:	705a      	strb	r2, [r3, #1]
	Data[2] = 	(blockIndex >> 16) ;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <readBlockSingle+0x1ac>)
 8000a5e:	709a      	strb	r2, [r3, #2]
	Data[3] = 	(blockIndex >> 8) ;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <readBlockSingle+0x1ac>)
 8000a68:	70da      	strb	r2, [r3, #3]
	Data[4] = 	(blockIndex >> 0) ;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b5c      	ldr	r3, [pc, #368]	; (8000be0 <readBlockSingle+0x1ac>)
 8000a70:	711a      	strb	r2, [r3, #4]
	Data[5] =   (0x00 | 0x01);
 8000a72:	4b5b      	ldr	r3, [pc, #364]	; (8000be0 <readBlockSingle+0x1ac>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	715a      	strb	r2, [r3, #5]

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	495a      	ldr	r1, [pc, #360]	; (8000be4 <readBlockSingle+0x1b0>)
 8000a7c:	485a      	ldr	r0, [pc, #360]	; (8000be8 <readBlockSingle+0x1b4>)
 8000a7e:	f000 fb6c 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000a82:	2300      	movs	r3, #0
 8000a84:	82fb      	strh	r3, [r7, #22]
 8000a86:	e002      	b.n	8000a8e <readBlockSingle+0x5a>
 8000a88:	8afb      	ldrh	r3, [r7, #22]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	82fb      	strh	r3, [r7, #22]
 8000a8e:	8afb      	ldrh	r3, [r7, #22]
 8000a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a94:	d3f8      	bcc.n	8000a88 <readBlockSingle+0x54>
	selectSDcard() ;
 8000a96:	f7ff fc5f 	bl	8000358 <selectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4951      	ldr	r1, [pc, #324]	; (8000be4 <readBlockSingle+0x1b0>)
 8000a9e:	4852      	ldr	r0, [pc, #328]	; (8000be8 <readBlockSingle+0x1b4>)
 8000aa0:	f000 fb5b 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, Data, 6);
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	494e      	ldr	r1, [pc, #312]	; (8000be0 <readBlockSingle+0x1ac>)
 8000aa8:	484f      	ldr	r0, [pc, #316]	; (8000be8 <readBlockSingle+0x1b4>)
 8000aaa:	f000 fb56 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	494c      	ldr	r1, [pc, #304]	; (8000be4 <readBlockSingle+0x1b0>)
 8000ab2:	484d      	ldr	r0, [pc, #308]	; (8000be8 <readBlockSingle+0x1b4>)
 8000ab4:	f000 fb51 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res1, 1) ;
 8000ab8:	f107 030f 	add.w	r3, r7, #15
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4849      	ldr	r0, [pc, #292]	; (8000be8 <readBlockSingle+0x1b4>)
 8000ac2:	f000 fb81 	bl	80011c8 <SPI_Read>
	printf("1 %p \n" , res1) ;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4848      	ldr	r0, [pc, #288]	; (8000bec <readBlockSingle+0x1b8>)
 8000acc:	f000 ff22 	bl	8001914 <iprintf>

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4944      	ldr	r1, [pc, #272]	; (8000be4 <readBlockSingle+0x1b0>)
 8000ad4:	4844      	ldr	r0, [pc, #272]	; (8000be8 <readBlockSingle+0x1b4>)
 8000ad6:	f000 fb40 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res1, 1) ;
 8000ada:	f107 030f 	add.w	r3, r7, #15
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4841      	ldr	r0, [pc, #260]	; (8000be8 <readBlockSingle+0x1b4>)
 8000ae4:	f000 fb70 	bl	80011c8 <SPI_Read>
	printf("1 %p \n" , res1) ;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4619      	mov	r1, r3
 8000aec:	483f      	ldr	r0, [pc, #252]	; (8000bec <readBlockSingle+0x1b8>)
 8000aee:	f000 ff11 	bl	8001914 <iprintf>

	for (uint16_t j = 0; j < 515; j++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	82bb      	strh	r3, [r7, #20]
 8000af6:	e053      	b.n	8000ba0 <readBlockSingle+0x16c>
		SPI_Send(SPI2, &dummyByte, 1) ;
 8000af8:	2201      	movs	r2, #1
 8000afa:	493a      	ldr	r1, [pc, #232]	; (8000be4 <readBlockSingle+0x1b0>)
 8000afc:	483a      	ldr	r0, [pc, #232]	; (8000be8 <readBlockSingle+0x1b4>)
 8000afe:	f000 fb2c 	bl	800115a <SPI_Send>
		SPI_Read(SPI2, &dummyReadByte, 1) ; // dummy reaad
 8000b02:	2201      	movs	r2, #1
 8000b04:	493a      	ldr	r1, [pc, #232]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b06:	4838      	ldr	r0, [pc, #224]	; (8000be8 <readBlockSingle+0x1b4>)
 8000b08:	f000 fb5e 	bl	80011c8 <SPI_Read>
		if (dummyReadByte == 0xFE) {
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2bfe      	cmp	r3, #254	; 0xfe
 8000b12:	d142      	bne.n	8000b9a <readBlockSingle+0x166>
			for (uint16_t i = 0;  i < 514; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	827b      	strh	r3, [r7, #18]
 8000b18:	e03a      	b.n	8000b90 <readBlockSingle+0x15c>
		SPI_Send(SPI2, &dummyByte, 1) ;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4931      	ldr	r1, [pc, #196]	; (8000be4 <readBlockSingle+0x1b0>)
 8000b1e:	4832      	ldr	r0, [pc, #200]	; (8000be8 <readBlockSingle+0x1b4>)
 8000b20:	f000 fb1b 	bl	800115a <SPI_Send>
		SPI_Read(SPI2, &dummyReadByte, 1) ; // dummy read
 8000b24:	2201      	movs	r2, #1
 8000b26:	4932      	ldr	r1, [pc, #200]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b28:	482f      	ldr	r0, [pc, #188]	; (8000be8 <readBlockSingle+0x1b4>)
 8000b2a:	f000 fb4d 	bl	80011c8 <SPI_Read>
		if (i == 510) {
 8000b2e:	8a7b      	ldrh	r3, [r7, #18]
 8000b30:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000b34:	d106      	bne.n	8000b44 <readBlockSingle+0x110>
			printf("1 signature is %p \n" , dummyReadByte) ;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	482d      	ldr	r0, [pc, #180]	; (8000bf4 <readBlockSingle+0x1c0>)
 8000b3e:	f000 fee9 	bl	8001914 <iprintf>
 8000b42:	e022      	b.n	8000b8a <readBlockSingle+0x156>
		}else if (i == 511) {
 8000b44:	8a7b      	ldrh	r3, [r7, #18]
 8000b46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <readBlockSingle+0x128>
			printf("2 signature is %p \n" , dummyReadByte) ;
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <readBlockSingle+0x1c4>)
 8000b56:	f000 fedd 	bl	8001914 <iprintf>
 8000b5a:	e016      	b.n	8000b8a <readBlockSingle+0x156>
		}else if (i == 512) {
 8000b5c:	8a7b      	ldrh	r3, [r7, #18]
 8000b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b62:	d106      	bne.n	8000b72 <readBlockSingle+0x13e>
			printf("2 CRC is %p \n" , dummyReadByte) ;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4824      	ldr	r0, [pc, #144]	; (8000bfc <readBlockSingle+0x1c8>)
 8000b6c:	f000 fed2 	bl	8001914 <iprintf>
 8000b70:	e00b      	b.n	8000b8a <readBlockSingle+0x156>
		}else if (i == 513) {
 8000b72:	8a7b      	ldrh	r3, [r7, #18]
 8000b74:	f240 2201 	movw	r2, #513	; 0x201
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d106      	bne.n	8000b8a <readBlockSingle+0x156>
			printf("2 CRC is %p \n" , dummyReadByte) ;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <readBlockSingle+0x1bc>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	481e      	ldr	r0, [pc, #120]	; (8000bfc <readBlockSingle+0x1c8>)
 8000b84:	f000 fec6 	bl	8001914 <iprintf>
 8000b88:	e025      	b.n	8000bd6 <readBlockSingle+0x1a2>
			for (uint16_t i = 0;  i < 514; i++) {
 8000b8a:	8a7b      	ldrh	r3, [r7, #18]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	827b      	strh	r3, [r7, #18]
 8000b90:	8a7b      	ldrh	r3, [r7, #18]
 8000b92:	f240 2201 	movw	r2, #513	; 0x201
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d9bf      	bls.n	8000b1a <readBlockSingle+0xe6>
	for (uint16_t j = 0; j < 515; j++) {
 8000b9a:	8abb      	ldrh	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	82bb      	strh	r3, [r7, #20]
 8000ba0:	8abb      	ldrh	r3, [r7, #20]
 8000ba2:	f240 2202 	movw	r2, #514	; 0x202
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d9a6      	bls.n	8000af8 <readBlockSingle+0xc4>
		}
			}
	    }
	}

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000baa:	2201      	movs	r2, #1
 8000bac:	490d      	ldr	r1, [pc, #52]	; (8000be4 <readBlockSingle+0x1b0>)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <readBlockSingle+0x1b4>)
 8000bb0:	f000 fad3 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	823b      	strh	r3, [r7, #16]
 8000bb8:	e002      	b.n	8000bc0 <readBlockSingle+0x18c>
 8000bba:	8a3b      	ldrh	r3, [r7, #16]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	823b      	strh	r3, [r7, #16]
 8000bc0:	8a3b      	ldrh	r3, [r7, #16]
 8000bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc6:	d3f8      	bcc.n	8000bba <readBlockSingle+0x186>
	deselectSDcard();
 8000bc8:	f7ff fbba 	bl	8000340 <deselectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4905      	ldr	r1, [pc, #20]	; (8000be4 <readBlockSingle+0x1b0>)
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <readBlockSingle+0x1b4>)
 8000bd2:	f000 fac2 	bl	800115a <SPI_Send>
}
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	0800293c 	.word	0x0800293c
 8000be0:	20000000 	.word	0x20000000
 8000be4:	2000000a 	.word	0x2000000a
 8000be8:	40003800 	.word	0x40003800
 8000bec:	080028d8 	.word	0x080028d8
 8000bf0:	2000000b 	.word	0x2000000b
 8000bf4:	08002944 	.word	0x08002944
 8000bf8:	08002958 	.word	0x08002958
 8000bfc:	0800296c 	.word	0x0800296c

08000c00 <writeBlockSingle>:


void writeBlockSingle(uint32_t blockIndex , uint8_t data){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	uint8_t res1 = 0xff ;
 8000c0c:	23ff      	movs	r3, #255	; 0xff
 8000c0e:	727b      	strb	r3, [r7, #9]
	printf("CMD24\n") ;
 8000c10:	4862      	ldr	r0, [pc, #392]	; (8000d9c <writeBlockSingle+0x19c>)
 8000c12:	f000 ff05 	bl	8001a20 <puts>
	Data[0] = 	0x58 ;
 8000c16:	4b62      	ldr	r3, [pc, #392]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c18:	2258      	movs	r2, #88	; 0x58
 8000c1a:	701a      	strb	r2, [r3, #0]
	Data[1] = 	(blockIndex >> 24) ;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	0e1b      	lsrs	r3, r3, #24
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b5f      	ldr	r3, [pc, #380]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c24:	705a      	strb	r2, [r3, #1]
	Data[2] = 	(blockIndex >> 16) ;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	0c1b      	lsrs	r3, r3, #16
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b5c      	ldr	r3, [pc, #368]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c2e:	709a      	strb	r2, [r3, #2]
	Data[3] = 	(blockIndex >> 8) ;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b5a      	ldr	r3, [pc, #360]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c38:	70da      	strb	r2, [r3, #3]
	Data[4] = 	(blockIndex >> 0) ;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c40:	711a      	strb	r2, [r3, #4]
	Data[5] =   (0x00 | 0x01);
 8000c42:	4b57      	ldr	r3, [pc, #348]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	715a      	strb	r2, [r3, #5]

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4956      	ldr	r1, [pc, #344]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000c4c:	4856      	ldr	r0, [pc, #344]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000c4e:	f000 fa84 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000c52:	2300      	movs	r3, #0
 8000c54:	81fb      	strh	r3, [r7, #14]
 8000c56:	e002      	b.n	8000c5e <writeBlockSingle+0x5e>
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	81fb      	strh	r3, [r7, #14]
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c64:	d3f8      	bcc.n	8000c58 <writeBlockSingle+0x58>
	selectSDcard() ;
 8000c66:	f7ff fb77 	bl	8000358 <selectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	494d      	ldr	r1, [pc, #308]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000c6e:	484e      	ldr	r0, [pc, #312]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000c70:	f000 fa73 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, Data, 6);
 8000c74:	2206      	movs	r2, #6
 8000c76:	494a      	ldr	r1, [pc, #296]	; (8000da0 <writeBlockSingle+0x1a0>)
 8000c78:	484b      	ldr	r0, [pc, #300]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000c7a:	f000 fa6e 	bl	800115a <SPI_Send>

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4948      	ldr	r1, [pc, #288]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000c82:	4849      	ldr	r0, [pc, #292]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000c84:	f000 fa69 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res1, 1) ;
 8000c88:	f107 0309 	add.w	r3, r7, #9
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4845      	ldr	r0, [pc, #276]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000c92:	f000 fa99 	bl	80011c8 <SPI_Read>
	printf("1 %p \n" , res1) ;
 8000c96:	7a7b      	ldrb	r3, [r7, #9]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4844      	ldr	r0, [pc, #272]	; (8000dac <writeBlockSingle+0x1ac>)
 8000c9c:	f000 fe3a 	bl	8001914 <iprintf>

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4940      	ldr	r1, [pc, #256]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000ca4:	4840      	ldr	r0, [pc, #256]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000ca6:	f000 fa58 	bl	800115a <SPI_Send>
	SPI_Read(SPI2, &res1, 1) ;
 8000caa:	f107 0309 	add.w	r3, r7, #9
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	483d      	ldr	r0, [pc, #244]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000cb4:	f000 fa88 	bl	80011c8 <SPI_Read>
	printf("1 %p \n" , res1) ;
 8000cb8:	7a7b      	ldrb	r3, [r7, #9]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	483b      	ldr	r0, [pc, #236]	; (8000dac <writeBlockSingle+0x1ac>)
 8000cbe:	f000 fe29 	bl	8001914 <iprintf>

		if (res1 == 0) {
 8000cc2:	7a7b      	ldrb	r3, [r7, #9]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10a      	bne.n	8000cde <writeBlockSingle+0xde>
		dummyByte = 0xFE ;
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000cca:	22fe      	movs	r2, #254	; 0xfe
 8000ccc:	701a      	strb	r2, [r3, #0]
		SPI_Send(SPI2, &dummyByte, 1) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4934      	ldr	r1, [pc, #208]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000cd2:	4835      	ldr	r0, [pc, #212]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000cd4:	f000 fa41 	bl	800115a <SPI_Send>
		dummyByte = 0xff ;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	701a      	strb	r2, [r3, #0]
		}
			for (uint16_t i = 0;  i < 512; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	81bb      	strh	r3, [r7, #12]
 8000ce2:	e008      	b.n	8000cf6 <writeBlockSingle+0xf6>
		SPI_Send(SPI2, &data, 1) ;
 8000ce4:	1cfb      	adds	r3, r7, #3
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4619      	mov	r1, r3
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000cec:	f000 fa35 	bl	800115a <SPI_Send>
			for (uint16_t i = 0;  i < 512; i++) {
 8000cf0:	89bb      	ldrh	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	81bb      	strh	r3, [r7, #12]
 8000cf6:	89bb      	ldrh	r3, [r7, #12]
 8000cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cfc:	d3f2      	bcc.n	8000ce4 <writeBlockSingle+0xe4>
			}
			SPI_Send(SPI2, &dummyByte, 1) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4928      	ldr	r1, [pc, #160]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000d02:	4829      	ldr	r0, [pc, #164]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d04:	f000 fa29 	bl	800115a <SPI_Send>
			SPI_Read(SPI2, &dummyReadByte, 1) ;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4929      	ldr	r1, [pc, #164]	; (8000db0 <writeBlockSingle+0x1b0>)
 8000d0c:	4826      	ldr	r0, [pc, #152]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d0e:	f000 fa5b 	bl	80011c8 <SPI_Read>

			while((dummyReadByte & 0x0F) != 0x05){
 8000d12:	e009      	b.n	8000d28 <writeBlockSingle+0x128>
			SPI_Send(SPI2, &dummyByte, 1) ;
 8000d14:	2201      	movs	r2, #1
 8000d16:	4923      	ldr	r1, [pc, #140]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000d18:	4823      	ldr	r0, [pc, #140]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d1a:	f000 fa1e 	bl	800115a <SPI_Send>
			SPI_Read(SPI2, &dummyReadByte, 1) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4923      	ldr	r1, [pc, #140]	; (8000db0 <writeBlockSingle+0x1b0>)
 8000d22:	4821      	ldr	r0, [pc, #132]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d24:	f000 fa50 	bl	80011c8 <SPI_Read>
			while((dummyReadByte & 0x0F) != 0x05){
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <writeBlockSingle+0x1b0>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d1ef      	bne.n	8000d14 <writeBlockSingle+0x114>
			}
			   SPI_Send(SPI2, &dummyByte, 1) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	491b      	ldr	r1, [pc, #108]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d3a:	f000 fa0e 	bl	800115a <SPI_Send>
						SPI_Read(SPI2, &dummyReadByte, 1) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	491b      	ldr	r1, [pc, #108]	; (8000db0 <writeBlockSingle+0x1b0>)
 8000d42:	4819      	ldr	r0, [pc, #100]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d44:	f000 fa40 	bl	80011c8 <SPI_Read>

			while(dummyReadByte == 0x00 ){
 8000d48:	e009      	b.n	8000d5e <writeBlockSingle+0x15e>
		    SPI_Send(SPI2, &dummyByte, 1) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4915      	ldr	r1, [pc, #84]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000d4e:	4816      	ldr	r0, [pc, #88]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d50:	f000 fa03 	bl	800115a <SPI_Send>
			SPI_Read(SPI2, &dummyReadByte, 1) ;
 8000d54:	2201      	movs	r2, #1
 8000d56:	4916      	ldr	r1, [pc, #88]	; (8000db0 <writeBlockSingle+0x1b0>)
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d5a:	f000 fa35 	bl	80011c8 <SPI_Read>
			while(dummyReadByte == 0x00 ){
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <writeBlockSingle+0x1b0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f1      	beq.n	8000d4a <writeBlockSingle+0x14a>
			}

	SPI_Send(SPI2, &dummyByte, 1) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	490e      	ldr	r1, [pc, #56]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d6c:	f000 f9f5 	bl	800115a <SPI_Send>
	// delay some time
	for (uint16_t i = 0;  i < 1000; i++) {}
 8000d70:	2300      	movs	r3, #0
 8000d72:	817b      	strh	r3, [r7, #10]
 8000d74:	e002      	b.n	8000d7c <writeBlockSingle+0x17c>
 8000d76:	897b      	ldrh	r3, [r7, #10]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	817b      	strh	r3, [r7, #10]
 8000d7c:	897b      	ldrh	r3, [r7, #10]
 8000d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d82:	d3f8      	bcc.n	8000d76 <writeBlockSingle+0x176>
	deselectSDcard();
 8000d84:	f7ff fadc 	bl	8000340 <deselectSDcard>
	SPI_Send(SPI2, &dummyByte, 1) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4906      	ldr	r1, [pc, #24]	; (8000da4 <writeBlockSingle+0x1a4>)
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <writeBlockSingle+0x1a8>)
 8000d8e:	f000 f9e4 	bl	800115a <SPI_Send>

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	0800297c 	.word	0x0800297c
 8000da0:	20000000 	.word	0x20000000
 8000da4:	2000000a 	.word	0x2000000a
 8000da8:	40003800 	.word	0x40003800
 8000dac:	080028d8 	.word	0x080028d8
 8000db0:	2000000b 	.word	0x2000000b

08000db4 <main>:
	printf("CMD12 \n") ;

}


int main (void ){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	printf("application running \n") ;
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <main+0x58>)
 8000dba:	f000 fe31 	bl	8001a20 <puts>

	SPI2_GPIOInits(); 	// setup the gpio pins for spi communication
 8000dbe:	f7ff fa67 	bl	8000290 <SPI2_GPIOInits>
	deselectSDcard();
 8000dc2:	f7ff fabd 	bl	8000340 <deselectSDcard>
	SPI2_Inits();		// spi2 initialization like sclk speed and cpol and cpha
 8000dc6:	f7ff fa9d 	bl	8000304 <SPI2_Inits>
	//spi ssi config
	SPI_SSIConfig(SPI2, ENABLE) ;	// mandate for software slave management
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <main+0x5c>)
 8000dce:	f000 fa60 	bl	8001292 <SPI_SSIConfig>
	// enable the spi peripheral
	SPI_PeripheralControl(SPI2, ENABLE) ; // enable spi2 for communiation
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <main+0x5c>)
 8000dd6:	f000 fa41 	bl	800125c <SPI_PeripheralControl>
	// send data over spi

	// start up sequence of sdcard
	sdPowerUp();
 8000dda:	f7ff fac9 	bl	8000370 <sdPowerUp>

	// sd card init sequence like voltage verification
	sdInitSeq();
 8000dde:	f7ff fb4d 	bl	800047c <sdInitSeq>

	// read OCR CCS field
	readOCR();
 8000de2:	f7ff fc1b 	bl	800061c <readOCR>

	// send ACMD41
	 sd_final_Init(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fce6 	bl	80007b8 <sd_final_Init>

	// read OCR CCS field again
	 readOCR();
 8000dec:	f7ff fc16 	bl	800061c <readOCR>

	// perepare for read and write
	prepReadWrite();
 8000df0:	f7ff fdf6 	bl	80009e0 <prepReadWrite>

	 // read block of data , data at block 0
	 readBlockSingle(0x00000000) ;
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fe1d 	bl	8000a34 <readBlockSingle>

	 // write block of data , data at block 0
	 writeBlockSingle(0x00000000 , 0x7F) ;
 8000dfa:	217f      	movs	r1, #127	; 0x7f
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff feff 	bl	8000c00 <writeBlockSingle>

	 // read block of data , data at block 0
	 readBlockSingle(0x00000000) ;
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fe16 	bl	8000a34 <readBlockSingle>


	//close the communication by disabling the peripherals


	while(1);
 8000e08:	e7fe      	b.n	8000e08 <main+0x54>
 8000e0a:	bf00      	nop
 8000e0c:	0800299c 	.word	0x0800299c
 8000e10:	40003800 	.word	0x40003800

08000e14 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <ITM_SendChar+0x44>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <ITM_SendChar+0x44>)
 8000e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e28:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <ITM_SendChar+0x48>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <ITM_SendChar+0x48>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e36:	bf00      	nop
 8000e38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f8      	beq.n	8000e38 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000e46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	e000edfc 	.word	0xe000edfc
 8000e5c:	e0000e00 	.word	0xe0000e00

08000e60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e00a      	b.n	8000e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e72:	f3af 8000 	nop.w
 8000e76:	4601      	mov	r1, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf0      	blt.n	8000e72 <_read+0x12>
	}

return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e009      	b.n	8000ec0 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++) ;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ffad 	bl	8000e14 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf1      	blt.n	8000eac <_write+0x12>
	}
	return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_close>:

int _close(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef8:	605a      	str	r2, [r3, #4]
	return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f000 fca4 	bl	80018b0 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	200000a8 	.word	0x200000a8

08000fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fce:	f000 fc75 	bl	80018bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff feef 	bl	8000db4 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe4:	08002a54 	.word	0x08002a54
  ldr r2, =_sbss
 8000fe8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fec:	200000a8 	.word	0x200000a8

08000ff0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <SPI_PeripheralClockControl>:

#include "stm32f407xx_spi_driver.h"

// spi peripheral clock control

void SPI_PeripheralClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE) {
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d120      	bne.n	8001048 <SPI_PeripheralClockControl+0x54>

		if (pSPIx == SPI1) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a22      	ldr	r2, [pc, #136]	; (8001094 <SPI_PeripheralClockControl+0xa0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d106      	bne.n	800101c <SPI_PeripheralClockControl+0x28>

			SPI1_CLOCK_ENABLE();
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a21      	ldr	r2, [pc, #132]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44

		}

	}

}
 800101a:	e035      	b.n	8001088 <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI2) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <SPI_PeripheralClockControl+0xa8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <SPI_PeripheralClockControl+0x3e>
			SPI2_CLOCK_ENABLE();
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001030:	e02a      	b.n	8001088 <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI3) {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <SPI_PeripheralClockControl+0xac>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d126      	bne.n	8001088 <SPI_PeripheralClockControl+0x94>
			SPI3_CLOCK_ENABLE();
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001046:	e01f      	b.n	8001088 <SPI_PeripheralClockControl+0x94>
		if (pSPIx == SPI1) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <SPI_PeripheralClockControl+0xa0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <SPI_PeripheralClockControl+0x6a>
			SPI1_CLOCK_DISABLE();
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800105a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800105c:	e014      	b.n	8001088 <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI2){
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <SPI_PeripheralClockControl+0xa8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d106      	bne.n	8001074 <SPI_PeripheralClockControl+0x80>
			SPI2_CLOCK_DISABLE();
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 800106c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001072:	e009      	b.n	8001088 <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI3) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SPI_PeripheralClockControl+0xac>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d105      	bne.n	8001088 <SPI_PeripheralClockControl+0x94>
			SPI3_CLOCK_DISABLE();
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SPI_PeripheralClockControl+0xa4>)
 8001082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40013000 	.word	0x40013000
 8001098:	40023800 	.word	0x40023800
 800109c:	40003800 	.word	0x40003800
 80010a0:	40003c00 	.word	0x40003c00

080010a4 <SPI_Init>:
// init and deinit apis
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

	// enable the clock
	SPI_PeripheralClockControl(pSPIHandle->pSPIx, ENABLE ) ;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff9e 	bl	8000ff4 <SPI_PeripheralClockControl>

// first configure the spi_cr1 register

	uint32_t tempreg = 0 ;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]

		// configure the the spi device mode
		tempreg |=  ( pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR) ;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

	// configure the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	795b      	ldrb	r3, [r3, #5]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d104      	bne.n	80010dc <SPI_Init+0x38>

		// BIDIMODE should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE) ;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e014      	b.n	8001106 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d104      	bne.n	80010ee <SPI_Init+0x4a>

		// BIDIMODE should be set
		tempreg |=  ( 1 << SPI_CR1_BIDIMODE) ;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e00b      	b.n	8001106 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	795b      	ldrb	r3, [r3, #5]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d107      	bne.n	8001106 <SPI_Init+0x62>

		// BIDIMODE should be cleared ;
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE) ;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010fc:	60fb      	str	r3, [r7, #12]

		// RXOONLY bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY) ;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001104:	60fb      	str	r3, [r7, #12]

	}

	// configure spi clock speed
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR) ;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	799b      	ldrb	r3, [r3, #6]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	461a      	mov	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

	// configure spi dff mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF) ;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	79db      	ldrb	r3, [r3, #7]
 8001118:	02db      	lsls	r3, r3, #11
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]

	// configure spi cpol
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL) ;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7a1b      	ldrb	r3, [r3, #8]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

	// configure spi cpha
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPHA) ;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7a1b      	ldrb	r3, [r3, #8]
 8001134:	461a      	mov	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

	// configure spi ssm
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM) ;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7a9b      	ldrb	r3, [r3, #10]
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg ;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	601a      	str	r2, [r3, #0]

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <SPI_Send>:
	}


}
// Spi send and receive apis
void SPI_Send(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t length) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]

	while(length > 0 ) {
 8001166:	e027      	b.n	80011b8 <SPI_Send+0x5e>

		// check for tx buffer empty state
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) {
 8001168:	bf00      	nop
 800116a:	2102      	movs	r1, #2
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f862 	bl	8001236 <SPI_GetFlagStatus>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f8      	beq.n	800116a <SPI_Send+0x10>

		}

		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <SPI_Send+0x48>

			// 16 bit data format
			// load 16 bit of data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer) ;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	60da      	str	r2, [r3, #12]
			length-- ;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3b01      	subs	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
			length-- ;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++ ;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3301      	adds	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	e00a      	b.n	80011b8 <SPI_Send+0x5e>

		} else {
			// load 8 bit data into DR
			pSPIx->DR = *pTxBuffer ;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	60da      	str	r2, [r3, #12]
			length-- ;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
			pTxBuffer++ ;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
	while(length > 0 ) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1d4      	bne.n	8001168 <SPI_Send+0xe>
//			printf("s \n ") ;

		}
	}

}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SPI_Read>:
void SPI_Read(SPI_RegDef_t *pSPIx , uint8_t *pRxBuffer , uint32_t length) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]

	while(length > 0 ) {
 80011d4:	e027      	b.n	8001226 <SPI_Read+0x5e>

		// check for rx buffer empty state
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET) {
 80011d6:	bf00      	nop
 80011d8:	2101      	movs	r1, #1
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f82b 	bl	8001236 <SPI_GetFlagStatus>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f8      	beq.n	80011d8 <SPI_Read+0x10>

		}

		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00e      	beq.n	8001210 <SPI_Read+0x48>

			// 16 bit data format
			// read 16 bit of data into DR
			 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	801a      	strh	r2, [r3, #0]
			length-- ;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
			length-- ;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3b01      	subs	r3, #1
 8001206:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++ ;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3301      	adds	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	e00a      	b.n	8001226 <SPI_Read+0x5e>

		} else {
			// load 8 bit data into DR
			*pRxBuffer = pSPIx->DR ;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	701a      	strb	r2, [r3, #0]
			length-- ;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3b01      	subs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
			pRxBuffer++ ;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3301      	adds	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
	while(length > 0 ) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1d4      	bne.n	80011d6 <SPI_Read+0xe>

		}
     }
  }
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <SPI_GetFlagStatus>:

//spi get flag status
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName ){
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]

	if ((pSPIx->SR &  (FlagName))) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SPI_GetFlagStatus+0x1a>

		return FLAG_SET ;
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET ;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <SPI_PeripheralControl>:

// Spi peripheral enable

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d106      	bne.n	800127c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 800127a:	e005      	b.n	8001288 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <SPI_SSIConfig>:

// Spi SSI configuration

void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d106      	bne.n	80012b2 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 80012b0:	e005      	b.n	80012be <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <GPIO_PeripClockControl>:
#include "stm32f407xx_gpio_driver.h"
#include <stdio.h>


// clock control api for gpio
void GPIO_PeripClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d178      	bne.n	80013cc <GPIO_PeripClockControl+0x104>

		if (pGPIOx == GPIOA) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <GPIO_PeripClockControl+0x200>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d106      	bne.n	80012f0 <GPIO_PeripClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 80012e2:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a79      	ldr	r2, [pc, #484]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOK){
			GPIOK_CLOCK_DISABLE();
		}
	}
}
 80012ee:	e0e5      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOB) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a77      	ldr	r2, [pc, #476]	; (80014d0 <GPIO_PeripClockControl+0x208>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d106      	bne.n	8001306 <GPIO_PeripClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 80012f8:	4b74      	ldr	r3, [pc, #464]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a73      	ldr	r2, [pc, #460]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001304:	e0da      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOC){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <GPIO_PeripClockControl+0x20c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d106      	bne.n	800131c <GPIO_PeripClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
}
 800131a:	e0cf      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOD){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <GPIO_PeripClockControl+0x210>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d106      	bne.n	8001332 <GPIO_PeripClockControl+0x6a>
			GPIOD_CLOCK_ENABLE();
 8001324:	4b69      	ldr	r3, [pc, #420]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001330:	e0c4      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOE){
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a69      	ldr	r2, [pc, #420]	; (80014dc <GPIO_PeripClockControl+0x214>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d106      	bne.n	8001348 <GPIO_PeripClockControl+0x80>
			GPIOE_CLOCK_ENABLE();
 800133a:	4b64      	ldr	r3, [pc, #400]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a63      	ldr	r2, [pc, #396]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001346:	e0b9      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOF){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <GPIO_PeripClockControl+0x218>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d106      	bne.n	800135e <GPIO_PeripClockControl+0x96>
			GPIOF_CLOCK_ENABLE();
 8001350:	4b5e      	ldr	r3, [pc, #376]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4a5d      	ldr	r2, [pc, #372]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001356:	f043 0320 	orr.w	r3, r3, #32
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800135c:	e0ae      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOG){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a60      	ldr	r2, [pc, #384]	; (80014e4 <GPIO_PeripClockControl+0x21c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d106      	bne.n	8001374 <GPIO_PeripClockControl+0xac>
			GPIOG_CLOCK_ENABLE();
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a58      	ldr	r2, [pc, #352]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001372:	e0a3      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOH){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a5c      	ldr	r2, [pc, #368]	; (80014e8 <GPIO_PeripClockControl+0x220>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d106      	bne.n	800138a <GPIO_PeripClockControl+0xc2>
			GPIOH_CLOCK_ENABLE();
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4a52      	ldr	r2, [pc, #328]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001386:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001388:	e098      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOI){
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a57      	ldr	r2, [pc, #348]	; (80014ec <GPIO_PeripClockControl+0x224>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d106      	bne.n	80013a0 <GPIO_PeripClockControl+0xd8>
			GPIOI_CLOCK_ENABLE();
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800139e:	e08d      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIO_PeripClockControl+0x228>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d106      	bne.n	80013b6 <GPIO_PeripClockControl+0xee>
			GPIOJ_CLOCK_ENABLE();
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013b4:	e082      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOK){
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <GPIO_PeripClockControl+0x22c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d17e      	bne.n	80014bc <GPIO_PeripClockControl+0x1f4>
			GPIOK_CLOCK_ENABLE();
 80013be:	4b43      	ldr	r3, [pc, #268]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a42      	ldr	r2, [pc, #264]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013ca:	e077      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		if (pGPIOx == GPIOA) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <GPIO_PeripClockControl+0x200>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d106      	bne.n	80013e2 <GPIO_PeripClockControl+0x11a>
			GPIOA_CLOCK_DISABLE();
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013e0:	e06c      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOB) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <GPIO_PeripClockControl+0x208>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <GPIO_PeripClockControl+0x130>
			GPIOB_CLOCK_DISABLE();
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a37      	ldr	r2, [pc, #220]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80013f0:	f023 0302 	bic.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013f6:	e061      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOC){
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <GPIO_PeripClockControl+0x20c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d106      	bne.n	800140e <GPIO_PeripClockControl+0x146>
			GPIOC_CLOCK_DISABLE();
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800140c:	e056      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOD){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <GPIO_PeripClockControl+0x210>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d106      	bne.n	8001424 <GPIO_PeripClockControl+0x15c>
			GPIOD_CLOCK_DISABLE();
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800141c:	f023 0308 	bic.w	r3, r3, #8
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001422:	e04b      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOE){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <GPIO_PeripClockControl+0x214>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d106      	bne.n	800143a <GPIO_PeripClockControl+0x172>
			GPIOE_CLOCK_DISABLE();
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001432:	f023 0310 	bic.w	r3, r3, #16
 8001436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001438:	e040      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOF){
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <GPIO_PeripClockControl+0x218>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d106      	bne.n	8001450 <GPIO_PeripClockControl+0x188>
			GPIOF_CLOCK_DISABLE();
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001448:	f023 0320 	bic.w	r3, r3, #32
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800144e:	e035      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOG){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <GPIO_PeripClockControl+0x21c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d106      	bne.n	8001466 <GPIO_PeripClockControl+0x19e>
			GPIOG_CLOCK_DISABLE();
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800145e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001464:	e02a      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOH){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <GPIO_PeripClockControl+0x220>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d106      	bne.n	800147c <GPIO_PeripClockControl+0x1b4>
			GPIOH_CLOCK_DISABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800147a:	e01f      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOI){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <GPIO_PeripClockControl+0x224>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d106      	bne.n	8001492 <GPIO_PeripClockControl+0x1ca>
			GPIOI_CLOCK_DISABLE();
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <GPIO_PeripClockControl+0x204>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800148a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001490:	e014      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <GPIO_PeripClockControl+0x228>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d106      	bne.n	80014a8 <GPIO_PeripClockControl+0x1e0>
			GPIOJ_CLOCK_DISABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <GPIO_PeripClockControl+0x204>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80014a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014a6:	e009      	b.n	80014bc <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOK){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <GPIO_PeripClockControl+0x22c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d105      	bne.n	80014bc <GPIO_PeripClockControl+0x1f4>
			GPIOK_CLOCK_DISABLE();
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <GPIO_PeripClockControl+0x204>)
 80014b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40021400 	.word	0x40021400
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40021c00 	.word	0x40021c00
 80014ec:	40022000 	.word	0x40022000
 80014f0:	40022400 	.word	0x40022400
 80014f4:	40022800 	.word	0x40022800

080014f8 <GPIO_Init>:

// gpio init and deinit apis
void GPIO_Init(GPIO_Handle_t* pGPIOHandle) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
			uint32_t temp = 0 ;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

//			// enable the peripheral clock
			GPIO_PeripClockControl(pGPIOHandle->pGPIOx, ENABLE) ;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fedc 	bl	80012c8 <GPIO_PeripClockControl>

	// configure the modes of a gpio pin
		// configuring non interrupt modes
		if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOGE ) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	795b      	ldrb	r3, [r3, #5]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d81f      	bhi.n	8001558 <GPIO_Init+0x60>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	795b      	ldrb	r3, [r3, #5]
 800151c:	461a      	mov	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); // @bug fix required
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	791b      	ldrb	r3, [r3, #4]
 8001534:	4619      	mov	r1, r3
 8001536:	2303      	movs	r3, #3
 8001538:	408b      	lsls	r3, r1
 800153a:	43db      	mvns	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp ;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e0e3      	b.n	8001720 <GPIO_Init+0x228>


		}else{
			// it is interrupt mode

			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	795b      	ldrb	r3, [r3, #5]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d117      	bne.n	8001590 <GPIO_Init+0x98>

				// configure the ftsr register
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8001560:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <GPIO_Init+0x1b0>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	7912      	ldrb	r2, [r2, #4]
 8001568:	4611      	mov	r1, r2
 800156a:	2201      	movs	r2, #1
 800156c:	408a      	lsls	r2, r1
 800156e:	4611      	mov	r1, r2
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <GPIO_Init+0x1b0>)
 8001572:	430b      	orrs	r3, r1
 8001574:	60d3      	str	r3, [r2, #12]
				// clear the rtsr bit
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <GPIO_Init+0x1b0>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	7912      	ldrb	r2, [r2, #4]
 800157e:	4611      	mov	r1, r2
 8001580:	2201      	movs	r2, #1
 8001582:	408a      	lsls	r2, r1
 8001584:	43d2      	mvns	r2, r2
 8001586:	4611      	mov	r1, r2
 8001588:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <GPIO_Init+0x1b0>)
 800158a:	400b      	ands	r3, r1
 800158c:	6093      	str	r3, [r2, #8]
 800158e:	e035      	b.n	80015fc <GPIO_Init+0x104>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	795b      	ldrb	r3, [r3, #5]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d117      	bne.n	80015c8 <GPIO_Init+0xd0>

				// configure the rtsr register
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8001598:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <GPIO_Init+0x1b0>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	7912      	ldrb	r2, [r2, #4]
 80015a0:	4611      	mov	r1, r2
 80015a2:	2201      	movs	r2, #1
 80015a4:	408a      	lsls	r2, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <GPIO_Init+0x1b0>)
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6093      	str	r3, [r2, #8]
				// clear the rtsr bit
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <GPIO_Init+0x1b0>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	7912      	ldrb	r2, [r2, #4]
 80015b6:	4611      	mov	r1, r2
 80015b8:	2201      	movs	r2, #1
 80015ba:	408a      	lsls	r2, r1
 80015bc:	43d2      	mvns	r2, r2
 80015be:	4611      	mov	r1, r2
 80015c0:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <GPIO_Init+0x1b0>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	60d3      	str	r3, [r2, #12]
 80015c6:	e019      	b.n	80015fc <GPIO_Init+0x104>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	795b      	ldrb	r3, [r3, #5]
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d115      	bne.n	80015fc <GPIO_Init+0x104>
				// configure the rftsr register
				// configure the rtsr register
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <GPIO_Init+0x1b0>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	7912      	ldrb	r2, [r2, #4]
 80015d8:	4611      	mov	r1, r2
 80015da:	2201      	movs	r2, #1
 80015dc:	408a      	lsls	r2, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <GPIO_Init+0x1b0>)
 80015e2:	430b      	orrs	r3, r1
 80015e4:	6093      	str	r3, [r2, #8]
				// clear the rtsr bit
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <GPIO_Init+0x1b0>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	7912      	ldrb	r2, [r2, #4]
 80015ee:	4611      	mov	r1, r2
 80015f0:	2201      	movs	r2, #1
 80015f2:	408a      	lsls	r2, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <GPIO_Init+0x1b0>)
 80015f8:	430b      	orrs	r3, r1
 80015fa:	60d3      	str	r3, [r2, #12]

			}

			// configure the gpio port selection in syscfg_exticr
				// syscfg SYSCFG_EXTICR[x] configures which pin of which port issues interrupt
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4  ;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4  ;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx)) ;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a26      	ldr	r2, [pc, #152]	; (80016ac <GPIO_Init+0x1b4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d05f      	beq.n	80016d8 <GPIO_Init+0x1e0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <GPIO_Init+0x1b8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d040      	beq.n	80016a4 <GPIO_Init+0x1ac>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <GPIO_Init+0x1bc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d039      	beq.n	80016a0 <GPIO_Init+0x1a8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <GPIO_Init+0x1c0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d032      	beq.n	800169c <GPIO_Init+0x1a4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <GPIO_Init+0x1c4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d02b      	beq.n	8001698 <GPIO_Init+0x1a0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <GPIO_Init+0x1c8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d024      	beq.n	8001694 <GPIO_Init+0x19c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <GPIO_Init+0x1cc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d01d      	beq.n	8001690 <GPIO_Init+0x198>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <GPIO_Init+0x1d0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d016      	beq.n	800168c <GPIO_Init+0x194>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <GPIO_Init+0x1d4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00f      	beq.n	8001688 <GPIO_Init+0x190>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <GPIO_Init+0x1d8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d008      	beq.n	8001684 <GPIO_Init+0x18c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <GPIO_Init+0x1dc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d101      	bne.n	8001680 <GPIO_Init+0x188>
 800167c:	230a      	movs	r3, #10
 800167e:	e02c      	b.n	80016da <GPIO_Init+0x1e2>
 8001680:	2300      	movs	r3, #0
 8001682:	e02a      	b.n	80016da <GPIO_Init+0x1e2>
 8001684:	2309      	movs	r3, #9
 8001686:	e028      	b.n	80016da <GPIO_Init+0x1e2>
 8001688:	2308      	movs	r3, #8
 800168a:	e026      	b.n	80016da <GPIO_Init+0x1e2>
 800168c:	2307      	movs	r3, #7
 800168e:	e024      	b.n	80016da <GPIO_Init+0x1e2>
 8001690:	2306      	movs	r3, #6
 8001692:	e022      	b.n	80016da <GPIO_Init+0x1e2>
 8001694:	2305      	movs	r3, #5
 8001696:	e020      	b.n	80016da <GPIO_Init+0x1e2>
 8001698:	2304      	movs	r3, #4
 800169a:	e01e      	b.n	80016da <GPIO_Init+0x1e2>
 800169c:	2303      	movs	r3, #3
 800169e:	e01c      	b.n	80016da <GPIO_Init+0x1e2>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e01a      	b.n	80016da <GPIO_Init+0x1e2>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e018      	b.n	80016da <GPIO_Init+0x1e2>
 80016a8:	40013c00 	.word	0x40013c00
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40022400 	.word	0x40022400
 80016d4:	40022800 	.word	0x40022800
 80016d8:	2300      	movs	r3, #0
 80016da:	747b      	strb	r3, [r7, #17]
				// enabling the clock for syscfg before configuring the registers for syscfg
			SYSCFG_CLOCK_ENABLE() ;
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <GPIO_Init+0x364>)
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	4a5e      	ldr	r2, [pc, #376]	; (800185c <GPIO_Init+0x364>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e6:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] |= (portcode << ( temp2 * 4) );
 80016e8:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <GPIO_Init+0x368>)
 80016ea:	7cfb      	ldrb	r3, [r7, #19]
 80016ec:	3302      	adds	r3, #2
 80016ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016f2:	7c79      	ldrb	r1, [r7, #17]
 80016f4:	7cbb      	ldrb	r3, [r7, #18]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	4958      	ldr	r1, [pc, #352]	; (8001860 <GPIO_Init+0x368>)
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	4302      	orrs	r2, r0
 8001704:	3302      	adds	r3, #2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// enable the interrupt delivery in exti
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <GPIO_Init+0x36c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	7912      	ldrb	r2, [r2, #4]
 8001712:	4611      	mov	r1, r2
 8001714:	2201      	movs	r2, #1
 8001716:	408a      	lsls	r2, r1
 8001718:	4611      	mov	r1, r2
 800171a:	4a52      	ldr	r2, [pc, #328]	; (8001864 <GPIO_Init+0x36c>)
 800171c:	430b      	orrs	r3, r1
 800171e:	6013      	str	r3, [r2, #0]

		}
				temp = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

	// configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	799b      	ldrb	r3, [r3, #6]
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	791b      	ldrb	r3, [r3, #4]
 8001740:	4619      	mov	r1, r3
 8001742:	2303      	movs	r3, #3
 8001744:	408b      	lsls	r3, r1
 8001746:	43db      	mvns	r3, r3
 8001748:	4619      	mov	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR  |= temp ;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
	temp = 0 ;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

	// configure the pupd control
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPUPDControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	79db      	ldrb	r3, [r3, #7]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	4619      	mov	r1, r3
 8001784:	2303      	movs	r3, #3
 8001786:	408b      	lsls	r3, r1
 8001788:	43db      	mvns	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR  |= temp ;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68d9      	ldr	r1, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]
	temp = 0 ;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

	// configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7a1b      	ldrb	r3, [r3, #8]
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	791b      	ldrb	r3, [r3, #4]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	791b      	ldrb	r3, [r3, #4]
 80017c2:	4619      	mov	r1, r3
 80017c4:	2301      	movs	r3, #1
 80017c6:	408b      	lsls	r3, r1
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	400a      	ands	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp ;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]
	temp = 0 ;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]


	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	795b      	ldrb	r3, [r3, #5]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d131      	bne.n	8001854 <GPIO_Init+0x35c>
		// configure the alternate function registers
		uint8_t temp1 , temp2 ;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  / 8 ;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	791b      	ldrb	r3, [r3, #4]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	7c3a      	ldrb	r2, [r7, #16]
 8001808:	3208      	adds	r2, #8
 800180a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	7c3a      	ldrb	r2, [r7, #16]
 8001822:	4001      	ands	r1, r0
 8001824:	3208      	adds	r2, #8
 8001826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2)) ;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	7c3a      	ldrb	r2, [r7, #16]
 8001830:	3208      	adds	r2, #8
 8001832:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7a5b      	ldrb	r3, [r3, #9]
 800183a:	461a      	mov	r2, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	4618      	mov	r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	7c3a      	ldrb	r2, [r7, #16]
 800184c:	4301      	orrs	r1, r0
 800184e:	3208      	adds	r2, #8
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	}

}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40013c00 	.word	0x40013c00

08001868 <GPIO_WriteToOutputPin>:
	uint16_t value ;
	value = (uint16_t)(pGPIOx->IDR ) ;
	return value ;

}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber , uint8_t Value) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
 8001874:	4613      	mov	r3, r2
 8001876:	70bb      	strb	r3, [r7, #2]

	if (Value == GPIO_PIN_SET) {
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d109      	bne.n	8001892 <GPIO_WriteToOutputPin+0x2a>
		// write 1 to the bit field corresponding pin number
		pGPIOx->ODR |= (1 << PinNumber) ;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	615a      	str	r2, [r3, #20]

	} else {
		// write 0  to the bit field corresponding pin number
		pGPIOx->ODR &= ~(1 << PinNumber) ;
	}
}
 8001890:	e009      	b.n	80018a6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber) ;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	43d2      	mvns	r2, r2
 80018a0:	401a      	ands	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	615a      	str	r2, [r3, #20]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <__errno>:
 80018b0:	4b01      	ldr	r3, [pc, #4]	; (80018b8 <__errno+0x8>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000000c 	.word	0x2000000c

080018bc <__libc_init_array>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	4d0d      	ldr	r5, [pc, #52]	; (80018f4 <__libc_init_array+0x38>)
 80018c0:	4c0d      	ldr	r4, [pc, #52]	; (80018f8 <__libc_init_array+0x3c>)
 80018c2:	1b64      	subs	r4, r4, r5
 80018c4:	10a4      	asrs	r4, r4, #2
 80018c6:	2600      	movs	r6, #0
 80018c8:	42a6      	cmp	r6, r4
 80018ca:	d109      	bne.n	80018e0 <__libc_init_array+0x24>
 80018cc:	4d0b      	ldr	r5, [pc, #44]	; (80018fc <__libc_init_array+0x40>)
 80018ce:	4c0c      	ldr	r4, [pc, #48]	; (8001900 <__libc_init_array+0x44>)
 80018d0:	f000 ffe8 	bl	80028a4 <_init>
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	2600      	movs	r6, #0
 80018da:	42a6      	cmp	r6, r4
 80018dc:	d105      	bne.n	80018ea <__libc_init_array+0x2e>
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e4:	4798      	blx	r3
 80018e6:	3601      	adds	r6, #1
 80018e8:	e7ee      	b.n	80018c8 <__libc_init_array+0xc>
 80018ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ee:	4798      	blx	r3
 80018f0:	3601      	adds	r6, #1
 80018f2:	e7f2      	b.n	80018da <__libc_init_array+0x1e>
 80018f4:	08002a4c 	.word	0x08002a4c
 80018f8:	08002a4c 	.word	0x08002a4c
 80018fc:	08002a4c 	.word	0x08002a4c
 8001900:	08002a50 	.word	0x08002a50

08001904 <memset>:
 8001904:	4402      	add	r2, r0
 8001906:	4603      	mov	r3, r0
 8001908:	4293      	cmp	r3, r2
 800190a:	d100      	bne.n	800190e <memset+0xa>
 800190c:	4770      	bx	lr
 800190e:	f803 1b01 	strb.w	r1, [r3], #1
 8001912:	e7f9      	b.n	8001908 <memset+0x4>

08001914 <iprintf>:
 8001914:	b40f      	push	{r0, r1, r2, r3}
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <iprintf+0x2c>)
 8001918:	b513      	push	{r0, r1, r4, lr}
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	b124      	cbz	r4, 8001928 <iprintf+0x14>
 800191e:	69a3      	ldr	r3, [r4, #24]
 8001920:	b913      	cbnz	r3, 8001928 <iprintf+0x14>
 8001922:	4620      	mov	r0, r4
 8001924:	f000 fa5e 	bl	8001de4 <__sinit>
 8001928:	ab05      	add	r3, sp, #20
 800192a:	9a04      	ldr	r2, [sp, #16]
 800192c:	68a1      	ldr	r1, [r4, #8]
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	4620      	mov	r0, r4
 8001932:	f000 fc2b 	bl	800218c <_vfiprintf_r>
 8001936:	b002      	add	sp, #8
 8001938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800193c:	b004      	add	sp, #16
 800193e:	4770      	bx	lr
 8001940:	2000000c 	.word	0x2000000c

08001944 <_puts_r>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	460e      	mov	r6, r1
 8001948:	4605      	mov	r5, r0
 800194a:	b118      	cbz	r0, 8001954 <_puts_r+0x10>
 800194c:	6983      	ldr	r3, [r0, #24]
 800194e:	b90b      	cbnz	r3, 8001954 <_puts_r+0x10>
 8001950:	f000 fa48 	bl	8001de4 <__sinit>
 8001954:	69ab      	ldr	r3, [r5, #24]
 8001956:	68ac      	ldr	r4, [r5, #8]
 8001958:	b913      	cbnz	r3, 8001960 <_puts_r+0x1c>
 800195a:	4628      	mov	r0, r5
 800195c:	f000 fa42 	bl	8001de4 <__sinit>
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <_puts_r+0xd0>)
 8001962:	429c      	cmp	r4, r3
 8001964:	d120      	bne.n	80019a8 <_puts_r+0x64>
 8001966:	686c      	ldr	r4, [r5, #4]
 8001968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800196a:	07db      	lsls	r3, r3, #31
 800196c:	d405      	bmi.n	800197a <_puts_r+0x36>
 800196e:	89a3      	ldrh	r3, [r4, #12]
 8001970:	0598      	lsls	r0, r3, #22
 8001972:	d402      	bmi.n	800197a <_puts_r+0x36>
 8001974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001976:	f000 fad3 	bl	8001f20 <__retarget_lock_acquire_recursive>
 800197a:	89a3      	ldrh	r3, [r4, #12]
 800197c:	0719      	lsls	r1, r3, #28
 800197e:	d51d      	bpl.n	80019bc <_puts_r+0x78>
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	b1db      	cbz	r3, 80019bc <_puts_r+0x78>
 8001984:	3e01      	subs	r6, #1
 8001986:	68a3      	ldr	r3, [r4, #8]
 8001988:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800198c:	3b01      	subs	r3, #1
 800198e:	60a3      	str	r3, [r4, #8]
 8001990:	bb39      	cbnz	r1, 80019e2 <_puts_r+0x9e>
 8001992:	2b00      	cmp	r3, #0
 8001994:	da38      	bge.n	8001a08 <_puts_r+0xc4>
 8001996:	4622      	mov	r2, r4
 8001998:	210a      	movs	r1, #10
 800199a:	4628      	mov	r0, r5
 800199c:	f000 f848 	bl	8001a30 <__swbuf_r>
 80019a0:	3001      	adds	r0, #1
 80019a2:	d011      	beq.n	80019c8 <_puts_r+0x84>
 80019a4:	250a      	movs	r5, #10
 80019a6:	e011      	b.n	80019cc <_puts_r+0x88>
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <_puts_r+0xd4>)
 80019aa:	429c      	cmp	r4, r3
 80019ac:	d101      	bne.n	80019b2 <_puts_r+0x6e>
 80019ae:	68ac      	ldr	r4, [r5, #8]
 80019b0:	e7da      	b.n	8001968 <_puts_r+0x24>
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <_puts_r+0xd8>)
 80019b4:	429c      	cmp	r4, r3
 80019b6:	bf08      	it	eq
 80019b8:	68ec      	ldreq	r4, [r5, #12]
 80019ba:	e7d5      	b.n	8001968 <_puts_r+0x24>
 80019bc:	4621      	mov	r1, r4
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 f888 	bl	8001ad4 <__swsetup_r>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d0dd      	beq.n	8001984 <_puts_r+0x40>
 80019c8:	f04f 35ff 	mov.w	r5, #4294967295
 80019cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019ce:	07da      	lsls	r2, r3, #31
 80019d0:	d405      	bmi.n	80019de <_puts_r+0x9a>
 80019d2:	89a3      	ldrh	r3, [r4, #12]
 80019d4:	059b      	lsls	r3, r3, #22
 80019d6:	d402      	bmi.n	80019de <_puts_r+0x9a>
 80019d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019da:	f000 faa2 	bl	8001f22 <__retarget_lock_release_recursive>
 80019de:	4628      	mov	r0, r5
 80019e0:	bd70      	pop	{r4, r5, r6, pc}
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da04      	bge.n	80019f0 <_puts_r+0xac>
 80019e6:	69a2      	ldr	r2, [r4, #24]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dc06      	bgt.n	80019fa <_puts_r+0xb6>
 80019ec:	290a      	cmp	r1, #10
 80019ee:	d004      	beq.n	80019fa <_puts_r+0xb6>
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	6022      	str	r2, [r4, #0]
 80019f6:	7019      	strb	r1, [r3, #0]
 80019f8:	e7c5      	b.n	8001986 <_puts_r+0x42>
 80019fa:	4622      	mov	r2, r4
 80019fc:	4628      	mov	r0, r5
 80019fe:	f000 f817 	bl	8001a30 <__swbuf_r>
 8001a02:	3001      	adds	r0, #1
 8001a04:	d1bf      	bne.n	8001986 <_puts_r+0x42>
 8001a06:	e7df      	b.n	80019c8 <_puts_r+0x84>
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	250a      	movs	r5, #10
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	6022      	str	r2, [r4, #0]
 8001a10:	701d      	strb	r5, [r3, #0]
 8001a12:	e7db      	b.n	80019cc <_puts_r+0x88>
 8001a14:	080029d8 	.word	0x080029d8
 8001a18:	080029f8 	.word	0x080029f8
 8001a1c:	080029b8 	.word	0x080029b8

08001a20 <puts>:
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <puts+0xc>)
 8001a22:	4601      	mov	r1, r0
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	f7ff bf8d 	b.w	8001944 <_puts_r>
 8001a2a:	bf00      	nop
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <__swbuf_r>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	460e      	mov	r6, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	4605      	mov	r5, r0
 8001a38:	b118      	cbz	r0, 8001a42 <__swbuf_r+0x12>
 8001a3a:	6983      	ldr	r3, [r0, #24]
 8001a3c:	b90b      	cbnz	r3, 8001a42 <__swbuf_r+0x12>
 8001a3e:	f000 f9d1 	bl	8001de4 <__sinit>
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <__swbuf_r+0x98>)
 8001a44:	429c      	cmp	r4, r3
 8001a46:	d12b      	bne.n	8001aa0 <__swbuf_r+0x70>
 8001a48:	686c      	ldr	r4, [r5, #4]
 8001a4a:	69a3      	ldr	r3, [r4, #24]
 8001a4c:	60a3      	str	r3, [r4, #8]
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	071a      	lsls	r2, r3, #28
 8001a52:	d52f      	bpl.n	8001ab4 <__swbuf_r+0x84>
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	b36b      	cbz	r3, 8001ab4 <__swbuf_r+0x84>
 8001a58:	6923      	ldr	r3, [r4, #16]
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	6963      	ldr	r3, [r4, #20]
 8001a60:	b2f6      	uxtb	r6, r6
 8001a62:	4283      	cmp	r3, r0
 8001a64:	4637      	mov	r7, r6
 8001a66:	dc04      	bgt.n	8001a72 <__swbuf_r+0x42>
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 f926 	bl	8001cbc <_fflush_r>
 8001a70:	bb30      	cbnz	r0, 8001ac0 <__swbuf_r+0x90>
 8001a72:	68a3      	ldr	r3, [r4, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60a3      	str	r3, [r4, #8]
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	6022      	str	r2, [r4, #0]
 8001a7e:	701e      	strb	r6, [r3, #0]
 8001a80:	6963      	ldr	r3, [r4, #20]
 8001a82:	3001      	adds	r0, #1
 8001a84:	4283      	cmp	r3, r0
 8001a86:	d004      	beq.n	8001a92 <__swbuf_r+0x62>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	07db      	lsls	r3, r3, #31
 8001a8c:	d506      	bpl.n	8001a9c <__swbuf_r+0x6c>
 8001a8e:	2e0a      	cmp	r6, #10
 8001a90:	d104      	bne.n	8001a9c <__swbuf_r+0x6c>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 f911 	bl	8001cbc <_fflush_r>
 8001a9a:	b988      	cbnz	r0, 8001ac0 <__swbuf_r+0x90>
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <__swbuf_r+0x9c>)
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d101      	bne.n	8001aaa <__swbuf_r+0x7a>
 8001aa6:	68ac      	ldr	r4, [r5, #8]
 8001aa8:	e7cf      	b.n	8001a4a <__swbuf_r+0x1a>
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <__swbuf_r+0xa0>)
 8001aac:	429c      	cmp	r4, r3
 8001aae:	bf08      	it	eq
 8001ab0:	68ec      	ldreq	r4, [r5, #12]
 8001ab2:	e7ca      	b.n	8001a4a <__swbuf_r+0x1a>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f80c 	bl	8001ad4 <__swsetup_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d0cb      	beq.n	8001a58 <__swbuf_r+0x28>
 8001ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8001ac4:	e7ea      	b.n	8001a9c <__swbuf_r+0x6c>
 8001ac6:	bf00      	nop
 8001ac8:	080029d8 	.word	0x080029d8
 8001acc:	080029f8 	.word	0x080029f8
 8001ad0:	080029b8 	.word	0x080029b8

08001ad4 <__swsetup_r>:
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <__swsetup_r+0xcc>)
 8001ad6:	b570      	push	{r4, r5, r6, lr}
 8001ad8:	681d      	ldr	r5, [r3, #0]
 8001ada:	4606      	mov	r6, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	b125      	cbz	r5, 8001aea <__swsetup_r+0x16>
 8001ae0:	69ab      	ldr	r3, [r5, #24]
 8001ae2:	b913      	cbnz	r3, 8001aea <__swsetup_r+0x16>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 f97d 	bl	8001de4 <__sinit>
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <__swsetup_r+0xd0>)
 8001aec:	429c      	cmp	r4, r3
 8001aee:	d10f      	bne.n	8001b10 <__swsetup_r+0x3c>
 8001af0:	686c      	ldr	r4, [r5, #4]
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001af8:	0719      	lsls	r1, r3, #28
 8001afa:	d42c      	bmi.n	8001b56 <__swsetup_r+0x82>
 8001afc:	06dd      	lsls	r5, r3, #27
 8001afe:	d411      	bmi.n	8001b24 <__swsetup_r+0x50>
 8001b00:	2309      	movs	r3, #9
 8001b02:	6033      	str	r3, [r6, #0]
 8001b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b08:	81a3      	strh	r3, [r4, #12]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	e03e      	b.n	8001b8e <__swsetup_r+0xba>
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <__swsetup_r+0xd4>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d101      	bne.n	8001b1a <__swsetup_r+0x46>
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	e7eb      	b.n	8001af2 <__swsetup_r+0x1e>
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <__swsetup_r+0xd8>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	68ec      	ldreq	r4, [r5, #12]
 8001b22:	e7e6      	b.n	8001af2 <__swsetup_r+0x1e>
 8001b24:	0758      	lsls	r0, r3, #29
 8001b26:	d512      	bpl.n	8001b4e <__swsetup_r+0x7a>
 8001b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b2a:	b141      	cbz	r1, 8001b3e <__swsetup_r+0x6a>
 8001b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d002      	beq.n	8001b3a <__swsetup_r+0x66>
 8001b34:	4630      	mov	r0, r6
 8001b36:	f000 fa59 	bl	8001fec <_free_r>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b44:	81a3      	strh	r3, [r4, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	6063      	str	r3, [r4, #4]
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	6923      	ldr	r3, [r4, #16]
 8001b58:	b94b      	cbnz	r3, 8001b6e <__swsetup_r+0x9a>
 8001b5a:	89a3      	ldrh	r3, [r4, #12]
 8001b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b64:	d003      	beq.n	8001b6e <__swsetup_r+0x9a>
 8001b66:	4621      	mov	r1, r4
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f000 f9ff 	bl	8001f6c <__smakebuf_r>
 8001b6e:	89a0      	ldrh	r0, [r4, #12]
 8001b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b74:	f010 0301 	ands.w	r3, r0, #1
 8001b78:	d00a      	beq.n	8001b90 <__swsetup_r+0xbc>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60a3      	str	r3, [r4, #8]
 8001b7e:	6963      	ldr	r3, [r4, #20]
 8001b80:	425b      	negs	r3, r3
 8001b82:	61a3      	str	r3, [r4, #24]
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	b943      	cbnz	r3, 8001b9a <__swsetup_r+0xc6>
 8001b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b8c:	d1ba      	bne.n	8001b04 <__swsetup_r+0x30>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	0781      	lsls	r1, r0, #30
 8001b92:	bf58      	it	pl
 8001b94:	6963      	ldrpl	r3, [r4, #20]
 8001b96:	60a3      	str	r3, [r4, #8]
 8001b98:	e7f4      	b.n	8001b84 <__swsetup_r+0xb0>
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	e7f7      	b.n	8001b8e <__swsetup_r+0xba>
 8001b9e:	bf00      	nop
 8001ba0:	2000000c 	.word	0x2000000c
 8001ba4:	080029d8 	.word	0x080029d8
 8001ba8:	080029f8 	.word	0x080029f8
 8001bac:	080029b8 	.word	0x080029b8

08001bb0 <__sflush_r>:
 8001bb0:	898a      	ldrh	r2, [r1, #12]
 8001bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	0710      	lsls	r0, r2, #28
 8001bba:	460c      	mov	r4, r1
 8001bbc:	d458      	bmi.n	8001c70 <__sflush_r+0xc0>
 8001bbe:	684b      	ldr	r3, [r1, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dc05      	bgt.n	8001bd0 <__sflush_r+0x20>
 8001bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	dc02      	bgt.n	8001bd0 <__sflush_r+0x20>
 8001bca:	2000      	movs	r0, #0
 8001bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	d0f9      	beq.n	8001bca <__sflush_r+0x1a>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bdc:	682f      	ldr	r7, [r5, #0]
 8001bde:	602b      	str	r3, [r5, #0]
 8001be0:	d032      	beq.n	8001c48 <__sflush_r+0x98>
 8001be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001be4:	89a3      	ldrh	r3, [r4, #12]
 8001be6:	075a      	lsls	r2, r3, #29
 8001be8:	d505      	bpl.n	8001bf6 <__sflush_r+0x46>
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	1ac0      	subs	r0, r0, r3
 8001bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bf0:	b10b      	cbz	r3, 8001bf6 <__sflush_r+0x46>
 8001bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bf4:	1ac0      	subs	r0, r0, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bfc:	6a21      	ldr	r1, [r4, #32]
 8001bfe:	4628      	mov	r0, r5
 8001c00:	47b0      	blx	r6
 8001c02:	1c43      	adds	r3, r0, #1
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	d106      	bne.n	8001c16 <__sflush_r+0x66>
 8001c08:	6829      	ldr	r1, [r5, #0]
 8001c0a:	291d      	cmp	r1, #29
 8001c0c:	d82c      	bhi.n	8001c68 <__sflush_r+0xb8>
 8001c0e:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <__sflush_r+0x108>)
 8001c10:	40ca      	lsrs	r2, r1
 8001c12:	07d6      	lsls	r6, r2, #31
 8001c14:	d528      	bpl.n	8001c68 <__sflush_r+0xb8>
 8001c16:	2200      	movs	r2, #0
 8001c18:	6062      	str	r2, [r4, #4]
 8001c1a:	04d9      	lsls	r1, r3, #19
 8001c1c:	6922      	ldr	r2, [r4, #16]
 8001c1e:	6022      	str	r2, [r4, #0]
 8001c20:	d504      	bpl.n	8001c2c <__sflush_r+0x7c>
 8001c22:	1c42      	adds	r2, r0, #1
 8001c24:	d101      	bne.n	8001c2a <__sflush_r+0x7a>
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	b903      	cbnz	r3, 8001c2c <__sflush_r+0x7c>
 8001c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8001c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c2e:	602f      	str	r7, [r5, #0]
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d0ca      	beq.n	8001bca <__sflush_r+0x1a>
 8001c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c38:	4299      	cmp	r1, r3
 8001c3a:	d002      	beq.n	8001c42 <__sflush_r+0x92>
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f000 f9d5 	bl	8001fec <_free_r>
 8001c42:	2000      	movs	r0, #0
 8001c44:	6360      	str	r0, [r4, #52]	; 0x34
 8001c46:	e7c1      	b.n	8001bcc <__sflush_r+0x1c>
 8001c48:	6a21      	ldr	r1, [r4, #32]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	47b0      	blx	r6
 8001c50:	1c41      	adds	r1, r0, #1
 8001c52:	d1c7      	bne.n	8001be4 <__sflush_r+0x34>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0c4      	beq.n	8001be4 <__sflush_r+0x34>
 8001c5a:	2b1d      	cmp	r3, #29
 8001c5c:	d001      	beq.n	8001c62 <__sflush_r+0xb2>
 8001c5e:	2b16      	cmp	r3, #22
 8001c60:	d101      	bne.n	8001c66 <__sflush_r+0xb6>
 8001c62:	602f      	str	r7, [r5, #0]
 8001c64:	e7b1      	b.n	8001bca <__sflush_r+0x1a>
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	e7ad      	b.n	8001bcc <__sflush_r+0x1c>
 8001c70:	690f      	ldr	r7, [r1, #16]
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	d0a9      	beq.n	8001bca <__sflush_r+0x1a>
 8001c76:	0793      	lsls	r3, r2, #30
 8001c78:	680e      	ldr	r6, [r1, #0]
 8001c7a:	bf08      	it	eq
 8001c7c:	694b      	ldreq	r3, [r1, #20]
 8001c7e:	600f      	str	r7, [r1, #0]
 8001c80:	bf18      	it	ne
 8001c82:	2300      	movne	r3, #0
 8001c84:	eba6 0807 	sub.w	r8, r6, r7
 8001c88:	608b      	str	r3, [r1, #8]
 8001c8a:	f1b8 0f00 	cmp.w	r8, #0
 8001c8e:	dd9c      	ble.n	8001bca <__sflush_r+0x1a>
 8001c90:	6a21      	ldr	r1, [r4, #32]
 8001c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c94:	4643      	mov	r3, r8
 8001c96:	463a      	mov	r2, r7
 8001c98:	4628      	mov	r0, r5
 8001c9a:	47b0      	blx	r6
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	dc06      	bgt.n	8001cae <__sflush_r+0xfe>
 8001ca0:	89a3      	ldrh	r3, [r4, #12]
 8001ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca6:	81a3      	strh	r3, [r4, #12]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	e78e      	b.n	8001bcc <__sflush_r+0x1c>
 8001cae:	4407      	add	r7, r0
 8001cb0:	eba8 0800 	sub.w	r8, r8, r0
 8001cb4:	e7e9      	b.n	8001c8a <__sflush_r+0xda>
 8001cb6:	bf00      	nop
 8001cb8:	20400001 	.word	0x20400001

08001cbc <_fflush_r>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	690b      	ldr	r3, [r1, #16]
 8001cc0:	4605      	mov	r5, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	b913      	cbnz	r3, 8001ccc <_fflush_r+0x10>
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4628      	mov	r0, r5
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
 8001ccc:	b118      	cbz	r0, 8001cd6 <_fflush_r+0x1a>
 8001cce:	6983      	ldr	r3, [r0, #24]
 8001cd0:	b90b      	cbnz	r3, 8001cd6 <_fflush_r+0x1a>
 8001cd2:	f000 f887 	bl	8001de4 <__sinit>
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <_fflush_r+0x6c>)
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	d11b      	bne.n	8001d14 <_fflush_r+0x58>
 8001cdc:	686c      	ldr	r4, [r5, #4]
 8001cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ef      	beq.n	8001cc6 <_fflush_r+0xa>
 8001ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ce8:	07d0      	lsls	r0, r2, #31
 8001cea:	d404      	bmi.n	8001cf6 <_fflush_r+0x3a>
 8001cec:	0599      	lsls	r1, r3, #22
 8001cee:	d402      	bmi.n	8001cf6 <_fflush_r+0x3a>
 8001cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cf2:	f000 f915 	bl	8001f20 <__retarget_lock_acquire_recursive>
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f7ff ff59 	bl	8001bb0 <__sflush_r>
 8001cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d00:	07da      	lsls	r2, r3, #31
 8001d02:	4605      	mov	r5, r0
 8001d04:	d4e0      	bmi.n	8001cc8 <_fflush_r+0xc>
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	059b      	lsls	r3, r3, #22
 8001d0a:	d4dd      	bmi.n	8001cc8 <_fflush_r+0xc>
 8001d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d0e:	f000 f908 	bl	8001f22 <__retarget_lock_release_recursive>
 8001d12:	e7d9      	b.n	8001cc8 <_fflush_r+0xc>
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <_fflush_r+0x70>)
 8001d16:	429c      	cmp	r4, r3
 8001d18:	d101      	bne.n	8001d1e <_fflush_r+0x62>
 8001d1a:	68ac      	ldr	r4, [r5, #8]
 8001d1c:	e7df      	b.n	8001cde <_fflush_r+0x22>
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <_fflush_r+0x74>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	bf08      	it	eq
 8001d24:	68ec      	ldreq	r4, [r5, #12]
 8001d26:	e7da      	b.n	8001cde <_fflush_r+0x22>
 8001d28:	080029d8 	.word	0x080029d8
 8001d2c:	080029f8 	.word	0x080029f8
 8001d30:	080029b8 	.word	0x080029b8

08001d34 <std>:
 8001d34:	2300      	movs	r3, #0
 8001d36:	b510      	push	{r4, lr}
 8001d38:	4604      	mov	r4, r0
 8001d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d42:	6083      	str	r3, [r0, #8]
 8001d44:	8181      	strh	r1, [r0, #12]
 8001d46:	6643      	str	r3, [r0, #100]	; 0x64
 8001d48:	81c2      	strh	r2, [r0, #14]
 8001d4a:	6183      	str	r3, [r0, #24]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	2208      	movs	r2, #8
 8001d50:	305c      	adds	r0, #92	; 0x5c
 8001d52:	f7ff fdd7 	bl	8001904 <memset>
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <std+0x38>)
 8001d58:	6263      	str	r3, [r4, #36]	; 0x24
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <std+0x3c>)
 8001d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <std+0x40>)
 8001d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <std+0x44>)
 8001d64:	6224      	str	r4, [r4, #32]
 8001d66:	6323      	str	r3, [r4, #48]	; 0x30
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08002735 	.word	0x08002735
 8001d70:	08002757 	.word	0x08002757
 8001d74:	0800278f 	.word	0x0800278f
 8001d78:	080027b3 	.word	0x080027b3

08001d7c <_cleanup_r>:
 8001d7c:	4901      	ldr	r1, [pc, #4]	; (8001d84 <_cleanup_r+0x8>)
 8001d7e:	f000 b8af 	b.w	8001ee0 <_fwalk_reent>
 8001d82:	bf00      	nop
 8001d84:	08001cbd 	.word	0x08001cbd

08001d88 <__sfmoreglue>:
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	1e4a      	subs	r2, r1, #1
 8001d8c:	2568      	movs	r5, #104	; 0x68
 8001d8e:	4355      	muls	r5, r2
 8001d90:	460e      	mov	r6, r1
 8001d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d96:	f000 f977 	bl	8002088 <_malloc_r>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b140      	cbz	r0, 8001db0 <__sfmoreglue+0x28>
 8001d9e:	2100      	movs	r1, #0
 8001da0:	e9c0 1600 	strd	r1, r6, [r0]
 8001da4:	300c      	adds	r0, #12
 8001da6:	60a0      	str	r0, [r4, #8]
 8001da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001dac:	f7ff fdaa 	bl	8001904 <memset>
 8001db0:	4620      	mov	r0, r4
 8001db2:	bd70      	pop	{r4, r5, r6, pc}

08001db4 <__sfp_lock_acquire>:
 8001db4:	4801      	ldr	r0, [pc, #4]	; (8001dbc <__sfp_lock_acquire+0x8>)
 8001db6:	f000 b8b3 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 8001dba:	bf00      	nop
 8001dbc:	200000a0 	.word	0x200000a0

08001dc0 <__sfp_lock_release>:
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <__sfp_lock_release+0x8>)
 8001dc2:	f000 b8ae 	b.w	8001f22 <__retarget_lock_release_recursive>
 8001dc6:	bf00      	nop
 8001dc8:	200000a0 	.word	0x200000a0

08001dcc <__sinit_lock_acquire>:
 8001dcc:	4801      	ldr	r0, [pc, #4]	; (8001dd4 <__sinit_lock_acquire+0x8>)
 8001dce:	f000 b8a7 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 8001dd2:	bf00      	nop
 8001dd4:	2000009b 	.word	0x2000009b

08001dd8 <__sinit_lock_release>:
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <__sinit_lock_release+0x8>)
 8001dda:	f000 b8a2 	b.w	8001f22 <__retarget_lock_release_recursive>
 8001dde:	bf00      	nop
 8001de0:	2000009b 	.word	0x2000009b

08001de4 <__sinit>:
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
 8001de8:	f7ff fff0 	bl	8001dcc <__sinit_lock_acquire>
 8001dec:	69a3      	ldr	r3, [r4, #24]
 8001dee:	b11b      	cbz	r3, 8001df8 <__sinit+0x14>
 8001df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001df4:	f7ff bff0 	b.w	8001dd8 <__sinit_lock_release>
 8001df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <__sinit+0x68>)
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <__sinit+0x6c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	bf04      	itt	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	61a3      	streq	r3, [r4, #24]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 f820 	bl	8001e54 <__sfp>
 8001e14:	6060      	str	r0, [r4, #4]
 8001e16:	4620      	mov	r0, r4
 8001e18:	f000 f81c 	bl	8001e54 <__sfp>
 8001e1c:	60a0      	str	r0, [r4, #8]
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f000 f818 	bl	8001e54 <__sfp>
 8001e24:	2200      	movs	r2, #0
 8001e26:	60e0      	str	r0, [r4, #12]
 8001e28:	2104      	movs	r1, #4
 8001e2a:	6860      	ldr	r0, [r4, #4]
 8001e2c:	f7ff ff82 	bl	8001d34 <std>
 8001e30:	68a0      	ldr	r0, [r4, #8]
 8001e32:	2201      	movs	r2, #1
 8001e34:	2109      	movs	r1, #9
 8001e36:	f7ff ff7d 	bl	8001d34 <std>
 8001e3a:	68e0      	ldr	r0, [r4, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	2112      	movs	r1, #18
 8001e40:	f7ff ff78 	bl	8001d34 <std>
 8001e44:	2301      	movs	r3, #1
 8001e46:	61a3      	str	r3, [r4, #24]
 8001e48:	e7d2      	b.n	8001df0 <__sinit+0xc>
 8001e4a:	bf00      	nop
 8001e4c:	080029b4 	.word	0x080029b4
 8001e50:	08001d7d 	.word	0x08001d7d

08001e54 <__sfp>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	4607      	mov	r7, r0
 8001e58:	f7ff ffac 	bl	8001db4 <__sfp_lock_acquire>
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <__sfp+0x84>)
 8001e5e:	681e      	ldr	r6, [r3, #0]
 8001e60:	69b3      	ldr	r3, [r6, #24]
 8001e62:	b913      	cbnz	r3, 8001e6a <__sfp+0x16>
 8001e64:	4630      	mov	r0, r6
 8001e66:	f7ff ffbd 	bl	8001de4 <__sinit>
 8001e6a:	3648      	adds	r6, #72	; 0x48
 8001e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	d503      	bpl.n	8001e7c <__sfp+0x28>
 8001e74:	6833      	ldr	r3, [r6, #0]
 8001e76:	b30b      	cbz	r3, 8001ebc <__sfp+0x68>
 8001e78:	6836      	ldr	r6, [r6, #0]
 8001e7a:	e7f7      	b.n	8001e6c <__sfp+0x18>
 8001e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e80:	b9d5      	cbnz	r5, 8001eb8 <__sfp+0x64>
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <__sfp+0x88>)
 8001e84:	60e3      	str	r3, [r4, #12]
 8001e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8001e8c:	f000 f847 	bl	8001f1e <__retarget_lock_init_recursive>
 8001e90:	f7ff ff96 	bl	8001dc0 <__sfp_lock_release>
 8001e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e9c:	6025      	str	r5, [r4, #0]
 8001e9e:	61a5      	str	r5, [r4, #24]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ea8:	f7ff fd2c 	bl	8001904 <memset>
 8001eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eb8:	3468      	adds	r4, #104	; 0x68
 8001eba:	e7d9      	b.n	8001e70 <__sfp+0x1c>
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	f7ff ff62 	bl	8001d88 <__sfmoreglue>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	6030      	str	r0, [r6, #0]
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d1d5      	bne.n	8001e78 <__sfp+0x24>
 8001ecc:	f7ff ff78 	bl	8001dc0 <__sfp_lock_release>
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	e7ee      	b.n	8001eb4 <__sfp+0x60>
 8001ed6:	bf00      	nop
 8001ed8:	080029b4 	.word	0x080029b4
 8001edc:	ffff0001 	.word	0xffff0001

08001ee0 <_fwalk_reent>:
 8001ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	4688      	mov	r8, r1
 8001ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001eec:	2700      	movs	r7, #0
 8001eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8001ef6:	d505      	bpl.n	8001f04 <_fwalk_reent+0x24>
 8001ef8:	6824      	ldr	r4, [r4, #0]
 8001efa:	2c00      	cmp	r4, #0
 8001efc:	d1f7      	bne.n	8001eee <_fwalk_reent+0xe>
 8001efe:	4638      	mov	r0, r7
 8001f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f04:	89ab      	ldrh	r3, [r5, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d907      	bls.n	8001f1a <_fwalk_reent+0x3a>
 8001f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	d003      	beq.n	8001f1a <_fwalk_reent+0x3a>
 8001f12:	4629      	mov	r1, r5
 8001f14:	4630      	mov	r0, r6
 8001f16:	47c0      	blx	r8
 8001f18:	4307      	orrs	r7, r0
 8001f1a:	3568      	adds	r5, #104	; 0x68
 8001f1c:	e7e9      	b.n	8001ef2 <_fwalk_reent+0x12>

08001f1e <__retarget_lock_init_recursive>:
 8001f1e:	4770      	bx	lr

08001f20 <__retarget_lock_acquire_recursive>:
 8001f20:	4770      	bx	lr

08001f22 <__retarget_lock_release_recursive>:
 8001f22:	4770      	bx	lr

08001f24 <__swhatbuf_r>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	460e      	mov	r6, r1
 8001f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	b096      	sub	sp, #88	; 0x58
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	da07      	bge.n	8001f46 <__swhatbuf_r+0x22>
 8001f36:	2300      	movs	r3, #0
 8001f38:	602b      	str	r3, [r5, #0]
 8001f3a:	89b3      	ldrh	r3, [r6, #12]
 8001f3c:	061a      	lsls	r2, r3, #24
 8001f3e:	d410      	bmi.n	8001f62 <__swhatbuf_r+0x3e>
 8001f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f44:	e00e      	b.n	8001f64 <__swhatbuf_r+0x40>
 8001f46:	466a      	mov	r2, sp
 8001f48:	f000 fc5a 	bl	8002800 <_fstat_r>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	dbf2      	blt.n	8001f36 <__swhatbuf_r+0x12>
 8001f50:	9a01      	ldr	r2, [sp, #4]
 8001f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f5a:	425a      	negs	r2, r3
 8001f5c:	415a      	adcs	r2, r3
 8001f5e:	602a      	str	r2, [r5, #0]
 8001f60:	e7ee      	b.n	8001f40 <__swhatbuf_r+0x1c>
 8001f62:	2340      	movs	r3, #64	; 0x40
 8001f64:	2000      	movs	r0, #0
 8001f66:	6023      	str	r3, [r4, #0]
 8001f68:	b016      	add	sp, #88	; 0x58
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}

08001f6c <__smakebuf_r>:
 8001f6c:	898b      	ldrh	r3, [r1, #12]
 8001f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f70:	079d      	lsls	r5, r3, #30
 8001f72:	4606      	mov	r6, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	d507      	bpl.n	8001f88 <__smakebuf_r+0x1c>
 8001f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	6123      	str	r3, [r4, #16]
 8001f80:	2301      	movs	r3, #1
 8001f82:	6163      	str	r3, [r4, #20]
 8001f84:	b002      	add	sp, #8
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
 8001f88:	ab01      	add	r3, sp, #4
 8001f8a:	466a      	mov	r2, sp
 8001f8c:	f7ff ffca 	bl	8001f24 <__swhatbuf_r>
 8001f90:	9900      	ldr	r1, [sp, #0]
 8001f92:	4605      	mov	r5, r0
 8001f94:	4630      	mov	r0, r6
 8001f96:	f000 f877 	bl	8002088 <_malloc_r>
 8001f9a:	b948      	cbnz	r0, 8001fb0 <__smakebuf_r+0x44>
 8001f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa0:	059a      	lsls	r2, r3, #22
 8001fa2:	d4ef      	bmi.n	8001f84 <__smakebuf_r+0x18>
 8001fa4:	f023 0303 	bic.w	r3, r3, #3
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	81a3      	strh	r3, [r4, #12]
 8001fae:	e7e3      	b.n	8001f78 <__smakebuf_r+0xc>
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <__smakebuf_r+0x7c>)
 8001fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fb4:	89a3      	ldrh	r3, [r4, #12]
 8001fb6:	6020      	str	r0, [r4, #0]
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbc:	81a3      	strh	r3, [r4, #12]
 8001fbe:	9b00      	ldr	r3, [sp, #0]
 8001fc0:	6163      	str	r3, [r4, #20]
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	6120      	str	r0, [r4, #16]
 8001fc6:	b15b      	cbz	r3, 8001fe0 <__smakebuf_r+0x74>
 8001fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fcc:	4630      	mov	r0, r6
 8001fce:	f000 fc29 	bl	8002824 <_isatty_r>
 8001fd2:	b128      	cbz	r0, 8001fe0 <__smakebuf_r+0x74>
 8001fd4:	89a3      	ldrh	r3, [r4, #12]
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	81a3      	strh	r3, [r4, #12]
 8001fe0:	89a0      	ldrh	r0, [r4, #12]
 8001fe2:	4305      	orrs	r5, r0
 8001fe4:	81a5      	strh	r5, [r4, #12]
 8001fe6:	e7cd      	b.n	8001f84 <__smakebuf_r+0x18>
 8001fe8:	08001d7d 	.word	0x08001d7d

08001fec <_free_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	4605      	mov	r5, r0
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	d045      	beq.n	8002080 <_free_r+0x94>
 8001ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ff8:	1f0c      	subs	r4, r1, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bfb8      	it	lt
 8001ffe:	18e4      	addlt	r4, r4, r3
 8002000:	f000 fc32 	bl	8002868 <__malloc_lock>
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <_free_r+0x98>)
 8002006:	6813      	ldr	r3, [r2, #0]
 8002008:	4610      	mov	r0, r2
 800200a:	b933      	cbnz	r3, 800201a <_free_r+0x2e>
 800200c:	6063      	str	r3, [r4, #4]
 800200e:	6014      	str	r4, [r2, #0]
 8002010:	4628      	mov	r0, r5
 8002012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002016:	f000 bc2d 	b.w	8002874 <__malloc_unlock>
 800201a:	42a3      	cmp	r3, r4
 800201c:	d90b      	bls.n	8002036 <_free_r+0x4a>
 800201e:	6821      	ldr	r1, [r4, #0]
 8002020:	1862      	adds	r2, r4, r1
 8002022:	4293      	cmp	r3, r2
 8002024:	bf04      	itt	eq
 8002026:	681a      	ldreq	r2, [r3, #0]
 8002028:	685b      	ldreq	r3, [r3, #4]
 800202a:	6063      	str	r3, [r4, #4]
 800202c:	bf04      	itt	eq
 800202e:	1852      	addeq	r2, r2, r1
 8002030:	6022      	streq	r2, [r4, #0]
 8002032:	6004      	str	r4, [r0, #0]
 8002034:	e7ec      	b.n	8002010 <_free_r+0x24>
 8002036:	461a      	mov	r2, r3
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	b10b      	cbz	r3, 8002040 <_free_r+0x54>
 800203c:	42a3      	cmp	r3, r4
 800203e:	d9fa      	bls.n	8002036 <_free_r+0x4a>
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	1850      	adds	r0, r2, r1
 8002044:	42a0      	cmp	r0, r4
 8002046:	d10b      	bne.n	8002060 <_free_r+0x74>
 8002048:	6820      	ldr	r0, [r4, #0]
 800204a:	4401      	add	r1, r0
 800204c:	1850      	adds	r0, r2, r1
 800204e:	4283      	cmp	r3, r0
 8002050:	6011      	str	r1, [r2, #0]
 8002052:	d1dd      	bne.n	8002010 <_free_r+0x24>
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	6053      	str	r3, [r2, #4]
 800205a:	4401      	add	r1, r0
 800205c:	6011      	str	r1, [r2, #0]
 800205e:	e7d7      	b.n	8002010 <_free_r+0x24>
 8002060:	d902      	bls.n	8002068 <_free_r+0x7c>
 8002062:	230c      	movs	r3, #12
 8002064:	602b      	str	r3, [r5, #0]
 8002066:	e7d3      	b.n	8002010 <_free_r+0x24>
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	1821      	adds	r1, r4, r0
 800206c:	428b      	cmp	r3, r1
 800206e:	bf04      	itt	eq
 8002070:	6819      	ldreq	r1, [r3, #0]
 8002072:	685b      	ldreq	r3, [r3, #4]
 8002074:	6063      	str	r3, [r4, #4]
 8002076:	bf04      	itt	eq
 8002078:	1809      	addeq	r1, r1, r0
 800207a:	6021      	streq	r1, [r4, #0]
 800207c:	6054      	str	r4, [r2, #4]
 800207e:	e7c7      	b.n	8002010 <_free_r+0x24>
 8002080:	bd38      	pop	{r3, r4, r5, pc}
 8002082:	bf00      	nop
 8002084:	20000090 	.word	0x20000090

08002088 <_malloc_r>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	1ccd      	adds	r5, r1, #3
 800208c:	f025 0503 	bic.w	r5, r5, #3
 8002090:	3508      	adds	r5, #8
 8002092:	2d0c      	cmp	r5, #12
 8002094:	bf38      	it	cc
 8002096:	250c      	movcc	r5, #12
 8002098:	2d00      	cmp	r5, #0
 800209a:	4606      	mov	r6, r0
 800209c:	db01      	blt.n	80020a2 <_malloc_r+0x1a>
 800209e:	42a9      	cmp	r1, r5
 80020a0:	d903      	bls.n	80020aa <_malloc_r+0x22>
 80020a2:	230c      	movs	r3, #12
 80020a4:	6033      	str	r3, [r6, #0]
 80020a6:	2000      	movs	r0, #0
 80020a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020aa:	f000 fbdd 	bl	8002868 <__malloc_lock>
 80020ae:	4921      	ldr	r1, [pc, #132]	; (8002134 <_malloc_r+0xac>)
 80020b0:	680a      	ldr	r2, [r1, #0]
 80020b2:	4614      	mov	r4, r2
 80020b4:	b99c      	cbnz	r4, 80020de <_malloc_r+0x56>
 80020b6:	4f20      	ldr	r7, [pc, #128]	; (8002138 <_malloc_r+0xb0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b923      	cbnz	r3, 80020c6 <_malloc_r+0x3e>
 80020bc:	4621      	mov	r1, r4
 80020be:	4630      	mov	r0, r6
 80020c0:	f000 fb28 	bl	8002714 <_sbrk_r>
 80020c4:	6038      	str	r0, [r7, #0]
 80020c6:	4629      	mov	r1, r5
 80020c8:	4630      	mov	r0, r6
 80020ca:	f000 fb23 	bl	8002714 <_sbrk_r>
 80020ce:	1c43      	adds	r3, r0, #1
 80020d0:	d123      	bne.n	800211a <_malloc_r+0x92>
 80020d2:	230c      	movs	r3, #12
 80020d4:	6033      	str	r3, [r6, #0]
 80020d6:	4630      	mov	r0, r6
 80020d8:	f000 fbcc 	bl	8002874 <__malloc_unlock>
 80020dc:	e7e3      	b.n	80020a6 <_malloc_r+0x1e>
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	1b5b      	subs	r3, r3, r5
 80020e2:	d417      	bmi.n	8002114 <_malloc_r+0x8c>
 80020e4:	2b0b      	cmp	r3, #11
 80020e6:	d903      	bls.n	80020f0 <_malloc_r+0x68>
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	441c      	add	r4, r3
 80020ec:	6025      	str	r5, [r4, #0]
 80020ee:	e004      	b.n	80020fa <_malloc_r+0x72>
 80020f0:	6863      	ldr	r3, [r4, #4]
 80020f2:	42a2      	cmp	r2, r4
 80020f4:	bf0c      	ite	eq
 80020f6:	600b      	streq	r3, [r1, #0]
 80020f8:	6053      	strne	r3, [r2, #4]
 80020fa:	4630      	mov	r0, r6
 80020fc:	f000 fbba 	bl	8002874 <__malloc_unlock>
 8002100:	f104 000b 	add.w	r0, r4, #11
 8002104:	1d23      	adds	r3, r4, #4
 8002106:	f020 0007 	bic.w	r0, r0, #7
 800210a:	1ac2      	subs	r2, r0, r3
 800210c:	d0cc      	beq.n	80020a8 <_malloc_r+0x20>
 800210e:	1a1b      	subs	r3, r3, r0
 8002110:	50a3      	str	r3, [r4, r2]
 8002112:	e7c9      	b.n	80020a8 <_malloc_r+0x20>
 8002114:	4622      	mov	r2, r4
 8002116:	6864      	ldr	r4, [r4, #4]
 8002118:	e7cc      	b.n	80020b4 <_malloc_r+0x2c>
 800211a:	1cc4      	adds	r4, r0, #3
 800211c:	f024 0403 	bic.w	r4, r4, #3
 8002120:	42a0      	cmp	r0, r4
 8002122:	d0e3      	beq.n	80020ec <_malloc_r+0x64>
 8002124:	1a21      	subs	r1, r4, r0
 8002126:	4630      	mov	r0, r6
 8002128:	f000 faf4 	bl	8002714 <_sbrk_r>
 800212c:	3001      	adds	r0, #1
 800212e:	d1dd      	bne.n	80020ec <_malloc_r+0x64>
 8002130:	e7cf      	b.n	80020d2 <_malloc_r+0x4a>
 8002132:	bf00      	nop
 8002134:	20000090 	.word	0x20000090
 8002138:	20000094 	.word	0x20000094

0800213c <__sfputc_r>:
 800213c:	6893      	ldr	r3, [r2, #8]
 800213e:	3b01      	subs	r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	b410      	push	{r4}
 8002144:	6093      	str	r3, [r2, #8]
 8002146:	da07      	bge.n	8002158 <__sfputc_r+0x1c>
 8002148:	6994      	ldr	r4, [r2, #24]
 800214a:	42a3      	cmp	r3, r4
 800214c:	db01      	blt.n	8002152 <__sfputc_r+0x16>
 800214e:	290a      	cmp	r1, #10
 8002150:	d102      	bne.n	8002158 <__sfputc_r+0x1c>
 8002152:	bc10      	pop	{r4}
 8002154:	f7ff bc6c 	b.w	8001a30 <__swbuf_r>
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	1c58      	adds	r0, r3, #1
 800215c:	6010      	str	r0, [r2, #0]
 800215e:	7019      	strb	r1, [r3, #0]
 8002160:	4608      	mov	r0, r1
 8002162:	bc10      	pop	{r4}
 8002164:	4770      	bx	lr

08002166 <__sfputs_r>:
 8002166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002168:	4606      	mov	r6, r0
 800216a:	460f      	mov	r7, r1
 800216c:	4614      	mov	r4, r2
 800216e:	18d5      	adds	r5, r2, r3
 8002170:	42ac      	cmp	r4, r5
 8002172:	d101      	bne.n	8002178 <__sfputs_r+0x12>
 8002174:	2000      	movs	r0, #0
 8002176:	e007      	b.n	8002188 <__sfputs_r+0x22>
 8002178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800217c:	463a      	mov	r2, r7
 800217e:	4630      	mov	r0, r6
 8002180:	f7ff ffdc 	bl	800213c <__sfputc_r>
 8002184:	1c43      	adds	r3, r0, #1
 8002186:	d1f3      	bne.n	8002170 <__sfputs_r+0xa>
 8002188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800218c <_vfiprintf_r>:
 800218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002190:	460d      	mov	r5, r1
 8002192:	b09d      	sub	sp, #116	; 0x74
 8002194:	4614      	mov	r4, r2
 8002196:	4698      	mov	r8, r3
 8002198:	4606      	mov	r6, r0
 800219a:	b118      	cbz	r0, 80021a4 <_vfiprintf_r+0x18>
 800219c:	6983      	ldr	r3, [r0, #24]
 800219e:	b90b      	cbnz	r3, 80021a4 <_vfiprintf_r+0x18>
 80021a0:	f7ff fe20 	bl	8001de4 <__sinit>
 80021a4:	4b89      	ldr	r3, [pc, #548]	; (80023cc <_vfiprintf_r+0x240>)
 80021a6:	429d      	cmp	r5, r3
 80021a8:	d11b      	bne.n	80021e2 <_vfiprintf_r+0x56>
 80021aa:	6875      	ldr	r5, [r6, #4]
 80021ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021ae:	07d9      	lsls	r1, r3, #31
 80021b0:	d405      	bmi.n	80021be <_vfiprintf_r+0x32>
 80021b2:	89ab      	ldrh	r3, [r5, #12]
 80021b4:	059a      	lsls	r2, r3, #22
 80021b6:	d402      	bmi.n	80021be <_vfiprintf_r+0x32>
 80021b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021ba:	f7ff feb1 	bl	8001f20 <__retarget_lock_acquire_recursive>
 80021be:	89ab      	ldrh	r3, [r5, #12]
 80021c0:	071b      	lsls	r3, r3, #28
 80021c2:	d501      	bpl.n	80021c8 <_vfiprintf_r+0x3c>
 80021c4:	692b      	ldr	r3, [r5, #16]
 80021c6:	b9eb      	cbnz	r3, 8002204 <_vfiprintf_r+0x78>
 80021c8:	4629      	mov	r1, r5
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7ff fc82 	bl	8001ad4 <__swsetup_r>
 80021d0:	b1c0      	cbz	r0, 8002204 <_vfiprintf_r+0x78>
 80021d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021d4:	07dc      	lsls	r4, r3, #31
 80021d6:	d50e      	bpl.n	80021f6 <_vfiprintf_r+0x6a>
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	b01d      	add	sp, #116	; 0x74
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e2:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <_vfiprintf_r+0x244>)
 80021e4:	429d      	cmp	r5, r3
 80021e6:	d101      	bne.n	80021ec <_vfiprintf_r+0x60>
 80021e8:	68b5      	ldr	r5, [r6, #8]
 80021ea:	e7df      	b.n	80021ac <_vfiprintf_r+0x20>
 80021ec:	4b79      	ldr	r3, [pc, #484]	; (80023d4 <_vfiprintf_r+0x248>)
 80021ee:	429d      	cmp	r5, r3
 80021f0:	bf08      	it	eq
 80021f2:	68f5      	ldreq	r5, [r6, #12]
 80021f4:	e7da      	b.n	80021ac <_vfiprintf_r+0x20>
 80021f6:	89ab      	ldrh	r3, [r5, #12]
 80021f8:	0598      	lsls	r0, r3, #22
 80021fa:	d4ed      	bmi.n	80021d8 <_vfiprintf_r+0x4c>
 80021fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021fe:	f7ff fe90 	bl	8001f22 <__retarget_lock_release_recursive>
 8002202:	e7e9      	b.n	80021d8 <_vfiprintf_r+0x4c>
 8002204:	2300      	movs	r3, #0
 8002206:	9309      	str	r3, [sp, #36]	; 0x24
 8002208:	2320      	movs	r3, #32
 800220a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800220e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002212:	2330      	movs	r3, #48	; 0x30
 8002214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80023d8 <_vfiprintf_r+0x24c>
 8002218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800221c:	f04f 0901 	mov.w	r9, #1
 8002220:	4623      	mov	r3, r4
 8002222:	469a      	mov	sl, r3
 8002224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002228:	b10a      	cbz	r2, 800222e <_vfiprintf_r+0xa2>
 800222a:	2a25      	cmp	r2, #37	; 0x25
 800222c:	d1f9      	bne.n	8002222 <_vfiprintf_r+0x96>
 800222e:	ebba 0b04 	subs.w	fp, sl, r4
 8002232:	d00b      	beq.n	800224c <_vfiprintf_r+0xc0>
 8002234:	465b      	mov	r3, fp
 8002236:	4622      	mov	r2, r4
 8002238:	4629      	mov	r1, r5
 800223a:	4630      	mov	r0, r6
 800223c:	f7ff ff93 	bl	8002166 <__sfputs_r>
 8002240:	3001      	adds	r0, #1
 8002242:	f000 80aa 	beq.w	800239a <_vfiprintf_r+0x20e>
 8002246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002248:	445a      	add	r2, fp
 800224a:	9209      	str	r2, [sp, #36]	; 0x24
 800224c:	f89a 3000 	ldrb.w	r3, [sl]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a2 	beq.w	800239a <_vfiprintf_r+0x20e>
 8002256:	2300      	movs	r3, #0
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002260:	f10a 0a01 	add.w	sl, sl, #1
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	9307      	str	r3, [sp, #28]
 8002268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800226c:	931a      	str	r3, [sp, #104]	; 0x68
 800226e:	4654      	mov	r4, sl
 8002270:	2205      	movs	r2, #5
 8002272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002276:	4858      	ldr	r0, [pc, #352]	; (80023d8 <_vfiprintf_r+0x24c>)
 8002278:	f7fd ffba 	bl	80001f0 <memchr>
 800227c:	9a04      	ldr	r2, [sp, #16]
 800227e:	b9d8      	cbnz	r0, 80022b8 <_vfiprintf_r+0x12c>
 8002280:	06d1      	lsls	r1, r2, #27
 8002282:	bf44      	itt	mi
 8002284:	2320      	movmi	r3, #32
 8002286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800228a:	0713      	lsls	r3, r2, #28
 800228c:	bf44      	itt	mi
 800228e:	232b      	movmi	r3, #43	; 0x2b
 8002290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002294:	f89a 3000 	ldrb.w	r3, [sl]
 8002298:	2b2a      	cmp	r3, #42	; 0x2a
 800229a:	d015      	beq.n	80022c8 <_vfiprintf_r+0x13c>
 800229c:	9a07      	ldr	r2, [sp, #28]
 800229e:	4654      	mov	r4, sl
 80022a0:	2000      	movs	r0, #0
 80022a2:	f04f 0c0a 	mov.w	ip, #10
 80022a6:	4621      	mov	r1, r4
 80022a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022ac:	3b30      	subs	r3, #48	; 0x30
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d94e      	bls.n	8002350 <_vfiprintf_r+0x1c4>
 80022b2:	b1b0      	cbz	r0, 80022e2 <_vfiprintf_r+0x156>
 80022b4:	9207      	str	r2, [sp, #28]
 80022b6:	e014      	b.n	80022e2 <_vfiprintf_r+0x156>
 80022b8:	eba0 0308 	sub.w	r3, r0, r8
 80022bc:	fa09 f303 	lsl.w	r3, r9, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	9304      	str	r3, [sp, #16]
 80022c4:	46a2      	mov	sl, r4
 80022c6:	e7d2      	b.n	800226e <_vfiprintf_r+0xe2>
 80022c8:	9b03      	ldr	r3, [sp, #12]
 80022ca:	1d19      	adds	r1, r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	9103      	str	r1, [sp, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfbb      	ittet	lt
 80022d4:	425b      	neglt	r3, r3
 80022d6:	f042 0202 	orrlt.w	r2, r2, #2
 80022da:	9307      	strge	r3, [sp, #28]
 80022dc:	9307      	strlt	r3, [sp, #28]
 80022de:	bfb8      	it	lt
 80022e0:	9204      	strlt	r2, [sp, #16]
 80022e2:	7823      	ldrb	r3, [r4, #0]
 80022e4:	2b2e      	cmp	r3, #46	; 0x2e
 80022e6:	d10c      	bne.n	8002302 <_vfiprintf_r+0x176>
 80022e8:	7863      	ldrb	r3, [r4, #1]
 80022ea:	2b2a      	cmp	r3, #42	; 0x2a
 80022ec:	d135      	bne.n	800235a <_vfiprintf_r+0x1ce>
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	1d1a      	adds	r2, r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	9203      	str	r2, [sp, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfb8      	it	lt
 80022fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80022fe:	3402      	adds	r4, #2
 8002300:	9305      	str	r3, [sp, #20]
 8002302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80023e8 <_vfiprintf_r+0x25c>
 8002306:	7821      	ldrb	r1, [r4, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	4650      	mov	r0, sl
 800230c:	f7fd ff70 	bl	80001f0 <memchr>
 8002310:	b140      	cbz	r0, 8002324 <_vfiprintf_r+0x198>
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	eba0 000a 	sub.w	r0, r0, sl
 8002318:	fa03 f000 	lsl.w	r0, r3, r0
 800231c:	9b04      	ldr	r3, [sp, #16]
 800231e:	4303      	orrs	r3, r0
 8002320:	3401      	adds	r4, #1
 8002322:	9304      	str	r3, [sp, #16]
 8002324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002328:	482c      	ldr	r0, [pc, #176]	; (80023dc <_vfiprintf_r+0x250>)
 800232a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800232e:	2206      	movs	r2, #6
 8002330:	f7fd ff5e 	bl	80001f0 <memchr>
 8002334:	2800      	cmp	r0, #0
 8002336:	d03f      	beq.n	80023b8 <_vfiprintf_r+0x22c>
 8002338:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <_vfiprintf_r+0x254>)
 800233a:	bb1b      	cbnz	r3, 8002384 <_vfiprintf_r+0x1f8>
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	3307      	adds	r3, #7
 8002340:	f023 0307 	bic.w	r3, r3, #7
 8002344:	3308      	adds	r3, #8
 8002346:	9303      	str	r3, [sp, #12]
 8002348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800234a:	443b      	add	r3, r7
 800234c:	9309      	str	r3, [sp, #36]	; 0x24
 800234e:	e767      	b.n	8002220 <_vfiprintf_r+0x94>
 8002350:	fb0c 3202 	mla	r2, ip, r2, r3
 8002354:	460c      	mov	r4, r1
 8002356:	2001      	movs	r0, #1
 8002358:	e7a5      	b.n	80022a6 <_vfiprintf_r+0x11a>
 800235a:	2300      	movs	r3, #0
 800235c:	3401      	adds	r4, #1
 800235e:	9305      	str	r3, [sp, #20]
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 0c0a 	mov.w	ip, #10
 8002366:	4620      	mov	r0, r4
 8002368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800236c:	3a30      	subs	r2, #48	; 0x30
 800236e:	2a09      	cmp	r2, #9
 8002370:	d903      	bls.n	800237a <_vfiprintf_r+0x1ee>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0c5      	beq.n	8002302 <_vfiprintf_r+0x176>
 8002376:	9105      	str	r1, [sp, #20]
 8002378:	e7c3      	b.n	8002302 <_vfiprintf_r+0x176>
 800237a:	fb0c 2101 	mla	r1, ip, r1, r2
 800237e:	4604      	mov	r4, r0
 8002380:	2301      	movs	r3, #1
 8002382:	e7f0      	b.n	8002366 <_vfiprintf_r+0x1da>
 8002384:	ab03      	add	r3, sp, #12
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	462a      	mov	r2, r5
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <_vfiprintf_r+0x258>)
 800238c:	a904      	add	r1, sp, #16
 800238e:	4630      	mov	r0, r6
 8002390:	f3af 8000 	nop.w
 8002394:	4607      	mov	r7, r0
 8002396:	1c78      	adds	r0, r7, #1
 8002398:	d1d6      	bne.n	8002348 <_vfiprintf_r+0x1bc>
 800239a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800239c:	07d9      	lsls	r1, r3, #31
 800239e:	d405      	bmi.n	80023ac <_vfiprintf_r+0x220>
 80023a0:	89ab      	ldrh	r3, [r5, #12]
 80023a2:	059a      	lsls	r2, r3, #22
 80023a4:	d402      	bmi.n	80023ac <_vfiprintf_r+0x220>
 80023a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023a8:	f7ff fdbb 	bl	8001f22 <__retarget_lock_release_recursive>
 80023ac:	89ab      	ldrh	r3, [r5, #12]
 80023ae:	065b      	lsls	r3, r3, #25
 80023b0:	f53f af12 	bmi.w	80021d8 <_vfiprintf_r+0x4c>
 80023b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023b6:	e711      	b.n	80021dc <_vfiprintf_r+0x50>
 80023b8:	ab03      	add	r3, sp, #12
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	462a      	mov	r2, r5
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <_vfiprintf_r+0x258>)
 80023c0:	a904      	add	r1, sp, #16
 80023c2:	4630      	mov	r0, r6
 80023c4:	f000 f880 	bl	80024c8 <_printf_i>
 80023c8:	e7e4      	b.n	8002394 <_vfiprintf_r+0x208>
 80023ca:	bf00      	nop
 80023cc:	080029d8 	.word	0x080029d8
 80023d0:	080029f8 	.word	0x080029f8
 80023d4:	080029b8 	.word	0x080029b8
 80023d8:	08002a18 	.word	0x08002a18
 80023dc:	08002a22 	.word	0x08002a22
 80023e0:	00000000 	.word	0x00000000
 80023e4:	08002167 	.word	0x08002167
 80023e8:	08002a1e 	.word	0x08002a1e

080023ec <_printf_common>:
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f0:	4616      	mov	r6, r2
 80023f2:	4699      	mov	r9, r3
 80023f4:	688a      	ldr	r2, [r1, #8]
 80023f6:	690b      	ldr	r3, [r1, #16]
 80023f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bfb8      	it	lt
 8002400:	4613      	movlt	r3, r2
 8002402:	6033      	str	r3, [r6, #0]
 8002404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002408:	4607      	mov	r7, r0
 800240a:	460c      	mov	r4, r1
 800240c:	b10a      	cbz	r2, 8002412 <_printf_common+0x26>
 800240e:	3301      	adds	r3, #1
 8002410:	6033      	str	r3, [r6, #0]
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	0699      	lsls	r1, r3, #26
 8002416:	bf42      	ittt	mi
 8002418:	6833      	ldrmi	r3, [r6, #0]
 800241a:	3302      	addmi	r3, #2
 800241c:	6033      	strmi	r3, [r6, #0]
 800241e:	6825      	ldr	r5, [r4, #0]
 8002420:	f015 0506 	ands.w	r5, r5, #6
 8002424:	d106      	bne.n	8002434 <_printf_common+0x48>
 8002426:	f104 0a19 	add.w	sl, r4, #25
 800242a:	68e3      	ldr	r3, [r4, #12]
 800242c:	6832      	ldr	r2, [r6, #0]
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	42ab      	cmp	r3, r5
 8002432:	dc26      	bgt.n	8002482 <_printf_common+0x96>
 8002434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002438:	1e13      	subs	r3, r2, #0
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	bf18      	it	ne
 800243e:	2301      	movne	r3, #1
 8002440:	0692      	lsls	r2, r2, #26
 8002442:	d42b      	bmi.n	800249c <_printf_common+0xb0>
 8002444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002448:	4649      	mov	r1, r9
 800244a:	4638      	mov	r0, r7
 800244c:	47c0      	blx	r8
 800244e:	3001      	adds	r0, #1
 8002450:	d01e      	beq.n	8002490 <_printf_common+0xa4>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	68e5      	ldr	r5, [r4, #12]
 8002456:	6832      	ldr	r2, [r6, #0]
 8002458:	f003 0306 	and.w	r3, r3, #6
 800245c:	2b04      	cmp	r3, #4
 800245e:	bf08      	it	eq
 8002460:	1aad      	subeq	r5, r5, r2
 8002462:	68a3      	ldr	r3, [r4, #8]
 8002464:	6922      	ldr	r2, [r4, #16]
 8002466:	bf0c      	ite	eq
 8002468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800246c:	2500      	movne	r5, #0
 800246e:	4293      	cmp	r3, r2
 8002470:	bfc4      	itt	gt
 8002472:	1a9b      	subgt	r3, r3, r2
 8002474:	18ed      	addgt	r5, r5, r3
 8002476:	2600      	movs	r6, #0
 8002478:	341a      	adds	r4, #26
 800247a:	42b5      	cmp	r5, r6
 800247c:	d11a      	bne.n	80024b4 <_printf_common+0xc8>
 800247e:	2000      	movs	r0, #0
 8002480:	e008      	b.n	8002494 <_printf_common+0xa8>
 8002482:	2301      	movs	r3, #1
 8002484:	4652      	mov	r2, sl
 8002486:	4649      	mov	r1, r9
 8002488:	4638      	mov	r0, r7
 800248a:	47c0      	blx	r8
 800248c:	3001      	adds	r0, #1
 800248e:	d103      	bne.n	8002498 <_printf_common+0xac>
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002498:	3501      	adds	r5, #1
 800249a:	e7c6      	b.n	800242a <_printf_common+0x3e>
 800249c:	18e1      	adds	r1, r4, r3
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	2030      	movs	r0, #48	; 0x30
 80024a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024a6:	4422      	add	r2, r4
 80024a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024b0:	3302      	adds	r3, #2
 80024b2:	e7c7      	b.n	8002444 <_printf_common+0x58>
 80024b4:	2301      	movs	r3, #1
 80024b6:	4622      	mov	r2, r4
 80024b8:	4649      	mov	r1, r9
 80024ba:	4638      	mov	r0, r7
 80024bc:	47c0      	blx	r8
 80024be:	3001      	adds	r0, #1
 80024c0:	d0e6      	beq.n	8002490 <_printf_common+0xa4>
 80024c2:	3601      	adds	r6, #1
 80024c4:	e7d9      	b.n	800247a <_printf_common+0x8e>
	...

080024c8 <_printf_i>:
 80024c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024cc:	460c      	mov	r4, r1
 80024ce:	4691      	mov	r9, r2
 80024d0:	7e27      	ldrb	r7, [r4, #24]
 80024d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024d4:	2f78      	cmp	r7, #120	; 0x78
 80024d6:	4680      	mov	r8, r0
 80024d8:	469a      	mov	sl, r3
 80024da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024de:	d807      	bhi.n	80024f0 <_printf_i+0x28>
 80024e0:	2f62      	cmp	r7, #98	; 0x62
 80024e2:	d80a      	bhi.n	80024fa <_printf_i+0x32>
 80024e4:	2f00      	cmp	r7, #0
 80024e6:	f000 80d8 	beq.w	800269a <_printf_i+0x1d2>
 80024ea:	2f58      	cmp	r7, #88	; 0x58
 80024ec:	f000 80a3 	beq.w	8002636 <_printf_i+0x16e>
 80024f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80024f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024f8:	e03a      	b.n	8002570 <_printf_i+0xa8>
 80024fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024fe:	2b15      	cmp	r3, #21
 8002500:	d8f6      	bhi.n	80024f0 <_printf_i+0x28>
 8002502:	a001      	add	r0, pc, #4	; (adr r0, 8002508 <_printf_i+0x40>)
 8002504:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002508:	08002561 	.word	0x08002561
 800250c:	08002575 	.word	0x08002575
 8002510:	080024f1 	.word	0x080024f1
 8002514:	080024f1 	.word	0x080024f1
 8002518:	080024f1 	.word	0x080024f1
 800251c:	080024f1 	.word	0x080024f1
 8002520:	08002575 	.word	0x08002575
 8002524:	080024f1 	.word	0x080024f1
 8002528:	080024f1 	.word	0x080024f1
 800252c:	080024f1 	.word	0x080024f1
 8002530:	080024f1 	.word	0x080024f1
 8002534:	08002681 	.word	0x08002681
 8002538:	080025a5 	.word	0x080025a5
 800253c:	08002663 	.word	0x08002663
 8002540:	080024f1 	.word	0x080024f1
 8002544:	080024f1 	.word	0x080024f1
 8002548:	080026a3 	.word	0x080026a3
 800254c:	080024f1 	.word	0x080024f1
 8002550:	080025a5 	.word	0x080025a5
 8002554:	080024f1 	.word	0x080024f1
 8002558:	080024f1 	.word	0x080024f1
 800255c:	0800266b 	.word	0x0800266b
 8002560:	680b      	ldr	r3, [r1, #0]
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	600a      	str	r2, [r1, #0]
 8002568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800256c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002570:	2301      	movs	r3, #1
 8002572:	e0a3      	b.n	80026bc <_printf_i+0x1f4>
 8002574:	6825      	ldr	r5, [r4, #0]
 8002576:	6808      	ldr	r0, [r1, #0]
 8002578:	062e      	lsls	r6, r5, #24
 800257a:	f100 0304 	add.w	r3, r0, #4
 800257e:	d50a      	bpl.n	8002596 <_printf_i+0xce>
 8002580:	6805      	ldr	r5, [r0, #0]
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	2d00      	cmp	r5, #0
 8002586:	da03      	bge.n	8002590 <_printf_i+0xc8>
 8002588:	232d      	movs	r3, #45	; 0x2d
 800258a:	426d      	negs	r5, r5
 800258c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002590:	485e      	ldr	r0, [pc, #376]	; (800270c <_printf_i+0x244>)
 8002592:	230a      	movs	r3, #10
 8002594:	e019      	b.n	80025ca <_printf_i+0x102>
 8002596:	f015 0f40 	tst.w	r5, #64	; 0x40
 800259a:	6805      	ldr	r5, [r0, #0]
 800259c:	600b      	str	r3, [r1, #0]
 800259e:	bf18      	it	ne
 80025a0:	b22d      	sxthne	r5, r5
 80025a2:	e7ef      	b.n	8002584 <_printf_i+0xbc>
 80025a4:	680b      	ldr	r3, [r1, #0]
 80025a6:	6825      	ldr	r5, [r4, #0]
 80025a8:	1d18      	adds	r0, r3, #4
 80025aa:	6008      	str	r0, [r1, #0]
 80025ac:	0628      	lsls	r0, r5, #24
 80025ae:	d501      	bpl.n	80025b4 <_printf_i+0xec>
 80025b0:	681d      	ldr	r5, [r3, #0]
 80025b2:	e002      	b.n	80025ba <_printf_i+0xf2>
 80025b4:	0669      	lsls	r1, r5, #25
 80025b6:	d5fb      	bpl.n	80025b0 <_printf_i+0xe8>
 80025b8:	881d      	ldrh	r5, [r3, #0]
 80025ba:	4854      	ldr	r0, [pc, #336]	; (800270c <_printf_i+0x244>)
 80025bc:	2f6f      	cmp	r7, #111	; 0x6f
 80025be:	bf0c      	ite	eq
 80025c0:	2308      	moveq	r3, #8
 80025c2:	230a      	movne	r3, #10
 80025c4:	2100      	movs	r1, #0
 80025c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025ca:	6866      	ldr	r6, [r4, #4]
 80025cc:	60a6      	str	r6, [r4, #8]
 80025ce:	2e00      	cmp	r6, #0
 80025d0:	bfa2      	ittt	ge
 80025d2:	6821      	ldrge	r1, [r4, #0]
 80025d4:	f021 0104 	bicge.w	r1, r1, #4
 80025d8:	6021      	strge	r1, [r4, #0]
 80025da:	b90d      	cbnz	r5, 80025e0 <_printf_i+0x118>
 80025dc:	2e00      	cmp	r6, #0
 80025de:	d04d      	beq.n	800267c <_printf_i+0x1b4>
 80025e0:	4616      	mov	r6, r2
 80025e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80025e6:	fb03 5711 	mls	r7, r3, r1, r5
 80025ea:	5dc7      	ldrb	r7, [r0, r7]
 80025ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025f0:	462f      	mov	r7, r5
 80025f2:	42bb      	cmp	r3, r7
 80025f4:	460d      	mov	r5, r1
 80025f6:	d9f4      	bls.n	80025e2 <_printf_i+0x11a>
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d10b      	bne.n	8002614 <_printf_i+0x14c>
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	07df      	lsls	r7, r3, #31
 8002600:	d508      	bpl.n	8002614 <_printf_i+0x14c>
 8002602:	6923      	ldr	r3, [r4, #16]
 8002604:	6861      	ldr	r1, [r4, #4]
 8002606:	4299      	cmp	r1, r3
 8002608:	bfde      	ittt	le
 800260a:	2330      	movle	r3, #48	; 0x30
 800260c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002610:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002614:	1b92      	subs	r2, r2, r6
 8002616:	6122      	str	r2, [r4, #16]
 8002618:	f8cd a000 	str.w	sl, [sp]
 800261c:	464b      	mov	r3, r9
 800261e:	aa03      	add	r2, sp, #12
 8002620:	4621      	mov	r1, r4
 8002622:	4640      	mov	r0, r8
 8002624:	f7ff fee2 	bl	80023ec <_printf_common>
 8002628:	3001      	adds	r0, #1
 800262a:	d14c      	bne.n	80026c6 <_printf_i+0x1fe>
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	b004      	add	sp, #16
 8002632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002636:	4835      	ldr	r0, [pc, #212]	; (800270c <_printf_i+0x244>)
 8002638:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	680e      	ldr	r6, [r1, #0]
 8002640:	061f      	lsls	r7, r3, #24
 8002642:	f856 5b04 	ldr.w	r5, [r6], #4
 8002646:	600e      	str	r6, [r1, #0]
 8002648:	d514      	bpl.n	8002674 <_printf_i+0x1ac>
 800264a:	07d9      	lsls	r1, r3, #31
 800264c:	bf44      	itt	mi
 800264e:	f043 0320 	orrmi.w	r3, r3, #32
 8002652:	6023      	strmi	r3, [r4, #0]
 8002654:	b91d      	cbnz	r5, 800265e <_printf_i+0x196>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	f023 0320 	bic.w	r3, r3, #32
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	2310      	movs	r3, #16
 8002660:	e7b0      	b.n	80025c4 <_printf_i+0xfc>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	2378      	movs	r3, #120	; 0x78
 800266c:	4828      	ldr	r0, [pc, #160]	; (8002710 <_printf_i+0x248>)
 800266e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002672:	e7e3      	b.n	800263c <_printf_i+0x174>
 8002674:	065e      	lsls	r6, r3, #25
 8002676:	bf48      	it	mi
 8002678:	b2ad      	uxthmi	r5, r5
 800267a:	e7e6      	b.n	800264a <_printf_i+0x182>
 800267c:	4616      	mov	r6, r2
 800267e:	e7bb      	b.n	80025f8 <_printf_i+0x130>
 8002680:	680b      	ldr	r3, [r1, #0]
 8002682:	6826      	ldr	r6, [r4, #0]
 8002684:	6960      	ldr	r0, [r4, #20]
 8002686:	1d1d      	adds	r5, r3, #4
 8002688:	600d      	str	r5, [r1, #0]
 800268a:	0635      	lsls	r5, r6, #24
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	d501      	bpl.n	8002694 <_printf_i+0x1cc>
 8002690:	6018      	str	r0, [r3, #0]
 8002692:	e002      	b.n	800269a <_printf_i+0x1d2>
 8002694:	0671      	lsls	r1, r6, #25
 8002696:	d5fb      	bpl.n	8002690 <_printf_i+0x1c8>
 8002698:	8018      	strh	r0, [r3, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	6123      	str	r3, [r4, #16]
 800269e:	4616      	mov	r6, r2
 80026a0:	e7ba      	b.n	8002618 <_printf_i+0x150>
 80026a2:	680b      	ldr	r3, [r1, #0]
 80026a4:	1d1a      	adds	r2, r3, #4
 80026a6:	600a      	str	r2, [r1, #0]
 80026a8:	681e      	ldr	r6, [r3, #0]
 80026aa:	6862      	ldr	r2, [r4, #4]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4630      	mov	r0, r6
 80026b0:	f7fd fd9e 	bl	80001f0 <memchr>
 80026b4:	b108      	cbz	r0, 80026ba <_printf_i+0x1f2>
 80026b6:	1b80      	subs	r0, r0, r6
 80026b8:	6060      	str	r0, [r4, #4]
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	6123      	str	r3, [r4, #16]
 80026be:	2300      	movs	r3, #0
 80026c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026c4:	e7a8      	b.n	8002618 <_printf_i+0x150>
 80026c6:	6923      	ldr	r3, [r4, #16]
 80026c8:	4632      	mov	r2, r6
 80026ca:	4649      	mov	r1, r9
 80026cc:	4640      	mov	r0, r8
 80026ce:	47d0      	blx	sl
 80026d0:	3001      	adds	r0, #1
 80026d2:	d0ab      	beq.n	800262c <_printf_i+0x164>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	079b      	lsls	r3, r3, #30
 80026d8:	d413      	bmi.n	8002702 <_printf_i+0x23a>
 80026da:	68e0      	ldr	r0, [r4, #12]
 80026dc:	9b03      	ldr	r3, [sp, #12]
 80026de:	4298      	cmp	r0, r3
 80026e0:	bfb8      	it	lt
 80026e2:	4618      	movlt	r0, r3
 80026e4:	e7a4      	b.n	8002630 <_printf_i+0x168>
 80026e6:	2301      	movs	r3, #1
 80026e8:	4632      	mov	r2, r6
 80026ea:	4649      	mov	r1, r9
 80026ec:	4640      	mov	r0, r8
 80026ee:	47d0      	blx	sl
 80026f0:	3001      	adds	r0, #1
 80026f2:	d09b      	beq.n	800262c <_printf_i+0x164>
 80026f4:	3501      	adds	r5, #1
 80026f6:	68e3      	ldr	r3, [r4, #12]
 80026f8:	9903      	ldr	r1, [sp, #12]
 80026fa:	1a5b      	subs	r3, r3, r1
 80026fc:	42ab      	cmp	r3, r5
 80026fe:	dcf2      	bgt.n	80026e6 <_printf_i+0x21e>
 8002700:	e7eb      	b.n	80026da <_printf_i+0x212>
 8002702:	2500      	movs	r5, #0
 8002704:	f104 0619 	add.w	r6, r4, #25
 8002708:	e7f5      	b.n	80026f6 <_printf_i+0x22e>
 800270a:	bf00      	nop
 800270c:	08002a29 	.word	0x08002a29
 8002710:	08002a3a 	.word	0x08002a3a

08002714 <_sbrk_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d06      	ldr	r5, [pc, #24]	; (8002730 <_sbrk_r+0x1c>)
 8002718:	2300      	movs	r3, #0
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7fe fc08 	bl	8000f34 <_sbrk>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_sbrk_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_sbrk_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200000a4 	.word	0x200000a4

08002734 <__sread>:
 8002734:	b510      	push	{r4, lr}
 8002736:	460c      	mov	r4, r1
 8002738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800273c:	f000 f8a0 	bl	8002880 <_read_r>
 8002740:	2800      	cmp	r0, #0
 8002742:	bfab      	itete	ge
 8002744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002746:	89a3      	ldrhlt	r3, [r4, #12]
 8002748:	181b      	addge	r3, r3, r0
 800274a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800274e:	bfac      	ite	ge
 8002750:	6563      	strge	r3, [r4, #84]	; 0x54
 8002752:	81a3      	strhlt	r3, [r4, #12]
 8002754:	bd10      	pop	{r4, pc}

08002756 <__swrite>:
 8002756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800275a:	461f      	mov	r7, r3
 800275c:	898b      	ldrh	r3, [r1, #12]
 800275e:	05db      	lsls	r3, r3, #23
 8002760:	4605      	mov	r5, r0
 8002762:	460c      	mov	r4, r1
 8002764:	4616      	mov	r6, r2
 8002766:	d505      	bpl.n	8002774 <__swrite+0x1e>
 8002768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800276c:	2302      	movs	r3, #2
 800276e:	2200      	movs	r2, #0
 8002770:	f000 f868 	bl	8002844 <_lseek_r>
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800277a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	4632      	mov	r2, r6
 8002782:	463b      	mov	r3, r7
 8002784:	4628      	mov	r0, r5
 8002786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800278a:	f000 b817 	b.w	80027bc <_write_r>

0800278e <__sseek>:
 800278e:	b510      	push	{r4, lr}
 8002790:	460c      	mov	r4, r1
 8002792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002796:	f000 f855 	bl	8002844 <_lseek_r>
 800279a:	1c43      	adds	r3, r0, #1
 800279c:	89a3      	ldrh	r3, [r4, #12]
 800279e:	bf15      	itete	ne
 80027a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80027a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027aa:	81a3      	strheq	r3, [r4, #12]
 80027ac:	bf18      	it	ne
 80027ae:	81a3      	strhne	r3, [r4, #12]
 80027b0:	bd10      	pop	{r4, pc}

080027b2 <__sclose>:
 80027b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b6:	f000 b813 	b.w	80027e0 <_close_r>
	...

080027bc <_write_r>:
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	4d07      	ldr	r5, [pc, #28]	; (80027dc <_write_r+0x20>)
 80027c0:	4604      	mov	r4, r0
 80027c2:	4608      	mov	r0, r1
 80027c4:	4611      	mov	r1, r2
 80027c6:	2200      	movs	r2, #0
 80027c8:	602a      	str	r2, [r5, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f7fe fb65 	bl	8000e9a <_write>
 80027d0:	1c43      	adds	r3, r0, #1
 80027d2:	d102      	bne.n	80027da <_write_r+0x1e>
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	b103      	cbz	r3, 80027da <_write_r+0x1e>
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	bd38      	pop	{r3, r4, r5, pc}
 80027dc:	200000a4 	.word	0x200000a4

080027e0 <_close_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4d06      	ldr	r5, [pc, #24]	; (80027fc <_close_r+0x1c>)
 80027e4:	2300      	movs	r3, #0
 80027e6:	4604      	mov	r4, r0
 80027e8:	4608      	mov	r0, r1
 80027ea:	602b      	str	r3, [r5, #0]
 80027ec:	f7fe fb71 	bl	8000ed2 <_close>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d102      	bne.n	80027fa <_close_r+0x1a>
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	b103      	cbz	r3, 80027fa <_close_r+0x1a>
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	200000a4 	.word	0x200000a4

08002800 <_fstat_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4d07      	ldr	r5, [pc, #28]	; (8002820 <_fstat_r+0x20>)
 8002804:	2300      	movs	r3, #0
 8002806:	4604      	mov	r4, r0
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	602b      	str	r3, [r5, #0]
 800280e:	f7fe fb6b 	bl	8000ee8 <_fstat>
 8002812:	1c43      	adds	r3, r0, #1
 8002814:	d102      	bne.n	800281c <_fstat_r+0x1c>
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	b103      	cbz	r3, 800281c <_fstat_r+0x1c>
 800281a:	6023      	str	r3, [r4, #0]
 800281c:	bd38      	pop	{r3, r4, r5, pc}
 800281e:	bf00      	nop
 8002820:	200000a4 	.word	0x200000a4

08002824 <_isatty_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4d06      	ldr	r5, [pc, #24]	; (8002840 <_isatty_r+0x1c>)
 8002828:	2300      	movs	r3, #0
 800282a:	4604      	mov	r4, r0
 800282c:	4608      	mov	r0, r1
 800282e:	602b      	str	r3, [r5, #0]
 8002830:	f7fe fb69 	bl	8000f06 <_isatty>
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	d102      	bne.n	800283e <_isatty_r+0x1a>
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	b103      	cbz	r3, 800283e <_isatty_r+0x1a>
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	bd38      	pop	{r3, r4, r5, pc}
 8002840:	200000a4 	.word	0x200000a4

08002844 <_lseek_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d07      	ldr	r5, [pc, #28]	; (8002864 <_lseek_r+0x20>)
 8002848:	4604      	mov	r4, r0
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	2200      	movs	r2, #0
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f7fe fb61 	bl	8000f1a <_lseek>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_lseek_r+0x1e>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b103      	cbz	r3, 8002862 <_lseek_r+0x1e>
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	200000a4 	.word	0x200000a4

08002868 <__malloc_lock>:
 8002868:	4801      	ldr	r0, [pc, #4]	; (8002870 <__malloc_lock+0x8>)
 800286a:	f7ff bb59 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 800286e:	bf00      	nop
 8002870:	2000009c 	.word	0x2000009c

08002874 <__malloc_unlock>:
 8002874:	4801      	ldr	r0, [pc, #4]	; (800287c <__malloc_unlock+0x8>)
 8002876:	f7ff bb54 	b.w	8001f22 <__retarget_lock_release_recursive>
 800287a:	bf00      	nop
 800287c:	2000009c 	.word	0x2000009c

08002880 <_read_r>:
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4d07      	ldr	r5, [pc, #28]	; (80028a0 <_read_r+0x20>)
 8002884:	4604      	mov	r4, r0
 8002886:	4608      	mov	r0, r1
 8002888:	4611      	mov	r1, r2
 800288a:	2200      	movs	r2, #0
 800288c:	602a      	str	r2, [r5, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	f7fe fae6 	bl	8000e60 <_read>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_read_r+0x1e>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_read_r+0x1e>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	200000a4 	.word	0x200000a4

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
